
AdaptiveCruiseControl_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a20  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006be8  08006be8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006be8  08006be8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006be8  08006be8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bec  08006bec  00016bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  20000078  08006c68  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08006c68  0002123c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d57  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe7  00000000  00000000  00032df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00035de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00036e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000400d  00000000  00000000  00037db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c26  00000000  00000000  0003bdc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e76  00000000  00000000  0004f9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004824  00000000  00000000  000e18b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b18 	.word	0x08006b18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006b18 	.word	0x08006b18

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__gesf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpsf2+0x4>
 8000992:	bf00      	nop

08000994 <__lesf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpsf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpsf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b6:	d011      	beq.n	80009dc <__cmpsf2+0x40>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009be:	bf18      	it	ne
 80009c0:	ea90 0f01 	teqne	r0, r1
 80009c4:	bf58      	it	pl
 80009c6:	ebb2 0003 	subspl.w	r0, r2, r3
 80009ca:	bf88      	it	hi
 80009cc:	17c8      	asrhi	r0, r1, #31
 80009ce:	bf38      	it	cc
 80009d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009d4:	bf18      	it	ne
 80009d6:	f040 0001 	orrne.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e0:	d102      	bne.n	80009e8 <__cmpsf2+0x4c>
 80009e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009e6:	d105      	bne.n	80009f4 <__cmpsf2+0x58>
 80009e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009ec:	d1e4      	bne.n	80009b8 <__cmpsf2+0x1c>
 80009ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009f2:	d0e1      	beq.n	80009b8 <__cmpsf2+0x1c>
 80009f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_cfrcmple>:
 80009fc:	4684      	mov	ip, r0
 80009fe:	4608      	mov	r0, r1
 8000a00:	4661      	mov	r1, ip
 8000a02:	e7ff      	b.n	8000a04 <__aeabi_cfcmpeq>

08000a04 <__aeabi_cfcmpeq>:
 8000a04:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a06:	f7ff ffc9 	bl	800099c <__cmpsf2>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	bf48      	it	mi
 8000a0e:	f110 0f00 	cmnmi.w	r0, #0
 8000a12:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a14 <__aeabi_fcmpeq>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff fff4 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a1c:	bf0c      	ite	eq
 8000a1e:	2001      	moveq	r0, #1
 8000a20:	2000      	movne	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_fcmplt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffea 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fcmple>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffe0 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a44:	bf94      	ite	ls
 8000a46:	2001      	movls	r0, #1
 8000a48:	2000      	movhi	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_fcmpge>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffd2 	bl	80009fc <__aeabi_cfrcmple>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_fcmpgt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffc8 	bl	80009fc <__aeabi_cfrcmple>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_f2uiz>:
 8000a78:	0042      	lsls	r2, r0, #1
 8000a7a:	d20e      	bcs.n	8000a9a <__aeabi_f2uiz+0x22>
 8000a7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a80:	d30b      	bcc.n	8000a9a <__aeabi_f2uiz+0x22>
 8000a82:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a8a:	d409      	bmi.n	8000aa0 <__aeabi_f2uiz+0x28>
 8000a8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a94:	fa23 f002 	lsr.w	r0, r3, r2
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0000 	mov.w	r0, #0
 8000a9e:	4770      	bx	lr
 8000aa0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000aa4:	d101      	bne.n	8000aaa <__aeabi_f2uiz+0x32>
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_f2uiz+0x38>
 8000aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <DC_Motor_Init>:

#include "DC_MOT.h"


void DC_Motor_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1); //start PWM on TIM3 channel 1
 8000abc:	2100      	movs	r1, #0
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <DC_Motor_Init+0x24>)
 8000ac0:	f002 fa72 	bl	8002fa8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1); //start PWM on TIM4 channel 1
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <DC_Motor_Init+0x28>)
 8000ac8:	f002 fa6e 	bl	8002fa8 <HAL_TIM_PWM_Start>
	TIM3->CCR1 = 0;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <DC_Motor_Init+0x2c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR1 = 0;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <DC_Motor_Init+0x30>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200003a8 	.word	0x200003a8
 8000ae0:	200003f0 	.word	0x200003f0
 8000ae4:	40000400 	.word	0x40000400
 8000ae8:	40000800 	.word	0x40000800

08000aec <DC_Motor_SetSpeed>:
void DC_Motor_SetSpeed(uint8_t dutyCycle)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR1 = dutyCycle;
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <DC_Motor_SetSpeed+0x20>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	6353      	str	r3, [r2, #52]	; 0x34
	TIM4->CCR1 = dutyCycle;
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <DC_Motor_SetSpeed+0x24>)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40000400 	.word	0x40000400
 8000b10:	40000800 	.word	0x40000800

08000b14 <DC_Motor_STOP>:
	}
}


void DC_Motor_STOP(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <DC_Motor_STOP+0x24>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR1 = 0;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <DC_Motor_STOP+0x28>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); // Close TIM3
 8000b24:	2100      	movs	r1, #0
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <DC_Motor_STOP+0x2c>)
 8000b28:	f002 fae0 	bl	80030ec <HAL_TIM_PWM_Stop>
	//HAL_GPIO_WritePin(GPIOA, ENA_PIN_6, GPIO_PIN_RESET);  //EN1 PIN ENABLE LOW
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);  //Close TIM4
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <DC_Motor_STOP+0x30>)
 8000b30:	f002 fadc 	bl	80030ec <HAL_TIM_PWM_Stop>
	//HAL_GPIO_WritePin(GPIOB, ENA_PIN_6, GPIO_PIN_RESET);  //EN1 PIN ENABLE LOW
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40000400 	.word	0x40000400
 8000b3c:	40000800 	.word	0x40000800
 8000b40:	200003a8 	.word	0x200003a8
 8000b44:	200003f0 	.word	0x200003f0

08000b48 <H_HC05_Recieve_Polling>:
  * @brief  Receive from HC-05 module (Polling mode).
  * @param  Copy_u8_Char: Pointer to store received character
  * @retval HAL_StatusTypeDef: HAL status
  */
HAL_StatusTypeDef H_HC05_Recieve_Polling(uint8_t* Copy_u8_Char)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef Local_enumRetValue = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	73fb      	strb	r3, [r7, #15]
    uint8_t Local_u8Counter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73bb      	strb	r3, [r7, #14]

    Local_enumRetValue = HAL_UART_Receive(&HC05_UART_PORT, &RxData[0], HC05_RecCharNum, 100);
 8000b58:	2364      	movs	r3, #100	; 0x64
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	4910      	ldr	r1, [pc, #64]	; (8000ba0 <H_HC05_Recieve_Polling+0x58>)
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <H_HC05_Recieve_Polling+0x5c>)
 8000b60:	f003 fccb 	bl	80044fa <HAL_UART_Receive>
 8000b64:	4603      	mov	r3, r0
 8000b66:	73fb      	strb	r3, [r7, #15]
    if(Local_enumRetValue != HAL_OK)
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <H_HC05_Recieve_Polling+0x2c>
    {
        Local_enumRetValue = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e00f      	b.n	8000b94 <H_HC05_Recieve_Polling+0x4c>
    }
    else
    {
        /* Copy received characters to the buffer */
        for(Local_u8Counter = 0; Local_u8Counter < HC05_RecCharNum; Local_u8Counter++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	73bb      	strb	r3, [r7, #14]
 8000b78:	e009      	b.n	8000b8e <H_HC05_Recieve_Polling+0x46>
        {
            Copy_u8_Char[Local_u8Counter] = RxData[Local_u8Counter];
 8000b7a:	7bba      	ldrb	r2, [r7, #14]
 8000b7c:	7bbb      	ldrb	r3, [r7, #14]
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	440b      	add	r3, r1
 8000b82:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <H_HC05_Recieve_Polling+0x58>)
 8000b84:	5c8a      	ldrb	r2, [r1, r2]
 8000b86:	701a      	strb	r2, [r3, #0]
        for(Local_u8Counter = 0; Local_u8Counter < HC05_RecCharNum; Local_u8Counter++)
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	73bb      	strb	r3, [r7, #14]
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d9f2      	bls.n	8000b7a <H_HC05_Recieve_Polling+0x32>
        }
    }

    return Local_enumRetValue;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000094 	.word	0x20000094
 8000ba4:	20000438 	.word	0x20000438

08000ba8 <HAL_UART_RxCpltCallback>:
  * @brief  Callback function for UART Rx complete interrupt.
  * @param  huart: Pointer to UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <HAL_UART_RxCpltCallback+0x24>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d104      	bne.n	8000bc4 <HAL_UART_RxCpltCallback+0x1c>
    {
        /* Re-enable interrupt receive */
        HAL_UART_Receive_IT(&HC05_UART_PORT, &RxData[0], HC05_RecCharNum);
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4904      	ldr	r1, [pc, #16]	; (8000bd0 <HAL_UART_RxCpltCallback+0x28>)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_UART_RxCpltCallback+0x2c>)
 8000bc0:	f003 fd2d 	bl	800461e <HAL_UART_Receive_IT>
    }
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	20000094 	.word	0x20000094
 8000bd4:	20000438 	.word	0x20000438

08000bd8 <LCD_voidInit>:
//include LCD Header files
#include "LCD_interface.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

	//Wait for power-on initialization time (greater than 40ms)
	//vTaskDelay(50);

	//Send 0x33 command sequence for 4-bit mode
	LCD_voidWriteCommand(0x33);
 8000bdc:	2033      	movs	r0, #51	; 0x33
 8000bde:	f000 f827 	bl	8000c30 <LCD_voidWriteCommand>
	vTaskDelay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f004 fea4 	bl	8005930 <vTaskDelay>

	//Send 0x32 command sequence for 4-bit mode
	LCD_voidWriteCommand(0x32);
 8000be8:	2032      	movs	r0, #50	; 0x32
 8000bea:	f000 f821 	bl	8000c30 <LCD_voidWriteCommand>
	vTaskDelay(10);
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f004 fe9e 	bl	8005930 <vTaskDelay>

	//Set interface to 4-bit mode and 2 lines, 5x8 font
	LCD_voidWriteCommand(0x28);
 8000bf4:	2028      	movs	r0, #40	; 0x28
 8000bf6:	f000 f81b 	bl	8000c30 <LCD_voidWriteCommand>
	vTaskDelay(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f004 fe98 	bl	8005930 <vTaskDelay>

	//Display on, cursor off, blink off
	LCD_voidWriteCommand(0x0C);
 8000c00:	200c      	movs	r0, #12
 8000c02:	f000 f815 	bl	8000c30 <LCD_voidWriteCommand>
	vTaskDelay(1);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f004 fe92 	bl	8005930 <vTaskDelay>

	//Entry mode set: increment cursor position, no display shift
	LCD_voidWriteCommand(0x06);
 8000c0c:	2006      	movs	r0, #6
 8000c0e:	f000 f80f 	bl	8000c30 <LCD_voidWriteCommand>
	vTaskDelay(1);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f004 fe8c 	bl	8005930 <vTaskDelay>

	//Clear the display
	LCD_voidWriteCommand(0x01);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 f809 	bl	8000c30 <LCD_voidWriteCommand>
	vTaskDelay(2);
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f004 fe86 	bl	8005930 <vTaskDelay>

	//Set cursor to the beginning of the first line
	LCD_voidWriteCommand(0x80);
 8000c24:	2080      	movs	r0, #128	; 0x80
 8000c26:	f000 f803 	bl	8000c30 <LCD_voidWriteCommand>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <LCD_voidWriteCommand>:

void LCD_voidWriteCommand(uint8_t copy_u8Cmd)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	// Write high nibble of command to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Cmd, 7)));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	09db      	lsrs	r3, r3, #7
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	2120      	movs	r1, #32
 8000c44:	483f      	ldr	r0, [pc, #252]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000c46:	f001 fce9 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Cmd, 6)));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	099b      	lsrs	r3, r3, #6
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	2110      	movs	r1, #16
 8000c5a:	483a      	ldr	r0, [pc, #232]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000c5c:	f001 fcde 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Cmd, 5)));
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	2108      	movs	r1, #8
 8000c70:	4834      	ldr	r0, [pc, #208]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000c72:	f001 fcd3 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Cmd, 4)));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	2104      	movs	r1, #4
 8000c86:	482f      	ldr	r0, [pc, #188]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000c88:	f001 fcc8 	bl	800261c <HAL_GPIO_WritePin>

	// Set RS pin for command mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_RESET); /* command */
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2101      	movs	r1, #1
 8000c90:	482c      	ldr	r0, [pc, #176]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000c92:	f001 fcc3 	bl	800261c <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2102      	movs	r1, #2
 8000c9a:	482a      	ldr	r0, [pc, #168]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000c9c:	f001 fcbe 	bl	800261c <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f004 fe45 	bl	8005930 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4826      	ldr	r0, [pc, #152]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000cac:	f001 fcb6 	bl	800261c <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f004 fe3d 	bl	8005930 <vTaskDelay>

	// Write low nibble of command to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Cmd, 3)));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	08db      	lsrs	r3, r3, #3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	481f      	ldr	r0, [pc, #124]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000cc8:	f001 fca8 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Cmd, 2)));
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	2110      	movs	r1, #16
 8000cdc:	4819      	ldr	r0, [pc, #100]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000cde:	f001 fc9d 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Cmd, 1)));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	085b      	lsrs	r3, r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	4814      	ldr	r0, [pc, #80]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000cf4:	f001 fc92 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Cmd, 0)));
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	2104      	movs	r1, #4
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000d06:	f001 fc89 	bl	800261c <HAL_GPIO_WritePin>

	// Set RS pin for command mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_RESET); /* command */
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000d10:	f001 fc84 	bl	800261c <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2102      	movs	r1, #2
 8000d18:	480a      	ldr	r0, [pc, #40]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000d1a:	f001 fc7f 	bl	800261c <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f004 fe06 	bl	8005930 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 8000d24:	2200      	movs	r2, #0
 8000d26:	2102      	movs	r1, #2
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <LCD_voidWriteCommand+0x114>)
 8000d2a:	f001 fc77 	bl	800261c <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f004 fdfe 	bl	8005930 <vTaskDelay>

	vTaskDelay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f004 fdfb 	bl	8005930 <vTaskDelay>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40010800 	.word	0x40010800

08000d48 <LCD_voidWriteData>:

void LCD_voidWriteData(uint8_t copy_u8Char)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	// Write high nibble of character to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Char, 7)));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	09db      	lsrs	r3, r3, #7
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	483f      	ldr	r0, [pc, #252]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000d5e:	f001 fc5d 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Char, 6)));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	099b      	lsrs	r3, r3, #6
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	2110      	movs	r1, #16
 8000d72:	483a      	ldr	r0, [pc, #232]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000d74:	f001 fc52 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Char, 5)));
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	2108      	movs	r1, #8
 8000d88:	4834      	ldr	r0, [pc, #208]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000d8a:	f001 fc47 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Char, 4)));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	091b      	lsrs	r3, r3, #4
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	482f      	ldr	r0, [pc, #188]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000da0:	f001 fc3c 	bl	800261c <HAL_GPIO_WritePin>

	// Set RS pin for data mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2101      	movs	r1, #1
 8000da8:	482c      	ldr	r0, [pc, #176]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000daa:	f001 fc37 	bl	800261c <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2102      	movs	r1, #2
 8000db2:	482a      	ldr	r0, [pc, #168]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000db4:	f001 fc32 	bl	800261c <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000db8:	2002      	movs	r0, #2
 8000dba:	f004 fdb9 	bl	8005930 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4826      	ldr	r0, [pc, #152]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000dc4:	f001 fc2a 	bl	800261c <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f004 fdb1 	bl	8005930 <vTaskDelay>

	// Write low nibble of character to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Char, 3)));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	08db      	lsrs	r3, r3, #3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	2120      	movs	r1, #32
 8000dde:	481f      	ldr	r0, [pc, #124]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000de0:	f001 fc1c 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Char, 2)));
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	2110      	movs	r1, #16
 8000df4:	4819      	ldr	r0, [pc, #100]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000df6:	f001 fc11 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Char, 1)));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	085b      	lsrs	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4814      	ldr	r0, [pc, #80]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000e0c:	f001 fc06 	bl	800261c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Char, 0)));
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	480f      	ldr	r0, [pc, #60]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000e1e:	f001 fbfd 	bl	800261c <HAL_GPIO_WritePin>

	// Set RS pin for data mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2101      	movs	r1, #1
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000e28:	f001 fbf8 	bl	800261c <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2102      	movs	r1, #2
 8000e30:	480a      	ldr	r0, [pc, #40]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000e32:	f001 fbf3 	bl	800261c <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000e36:	2002      	movs	r0, #2
 8000e38:	f004 fd7a 	bl	8005930 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <LCD_voidWriteData+0x114>)
 8000e42:	f001 fbeb 	bl	800261c <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f004 fd72 	bl	8005930 <vTaskDelay>

	vTaskDelay(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f004 fd6f 	bl	8005930 <vTaskDelay>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40010800 	.word	0x40010800

08000e60 <LCD_voidClear>:

void LCD_voidClear(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	LCD_voidWriteCommand(0x01); // Send clear screen command
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff fee3 	bl	8000c30 <LCD_voidWriteCommand>
	vTaskDelay(2); // Delay for 2 milliseconds
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f004 fd60 	bl	8005930 <vTaskDelay>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <LCD_voidSetCursor>:

void LCD_voidSetCursor(uint8_t copy_u8Row, uint8_t copy_u8Col)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
	LCD_voidWriteCommand((128 + (copy_u8Row * 64) + copy_u8Col)); // Set cursor position
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	3302      	adds	r3, #2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	019b      	lsls	r3, r3, #6
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	4413      	add	r3, r2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fecb 	bl	8000c30 <LCD_voidWriteCommand>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <LCD_voidWriteString>:

void LCD_voidWriteString(const uint8_t *copy_cu8pString)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	uint8_t local_u8i = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
	do
	{
		LCD_voidWriteData(copy_cu8pString[local_u8i]); // Write each character in the string
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff46 	bl	8000d48 <LCD_voidWriteData>
		local_u8i++;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
	} while (copy_cu8pString[local_u8i] != '\0'); // Continue until null terminator is reached
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1ef      	bne.n	8000eae <LCD_voidWriteString+0xc>
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <LCD_voidWriteNum>:

void LCD_voidWriteNum(uint32_t copy_u32Num)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	if (0 == copy_u32Num)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d110      	bne.n	8000f08 <LCD_voidWriteNum+0x30>
	{
		LCD_voidWriteData((copy_u32Num % 10) + 48); // Write digit as character
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <LCD_voidWriteNum+0xa8>)
 8000eea:	fba3 2301 	umull	r2, r3, r3, r1
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	1aca      	subs	r2, r1, r3
 8000efa:	b2d3      	uxtb	r3, r2
 8000efc:	3330      	adds	r3, #48	; 0x30
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff21 	bl	8000d48 <LCD_voidWriteData>
		{
			LCD_voidWriteData((reverse % 10) + 48); // Write digit as character
			reverse /= 10;
		}
	}
}
 8000f06:	e037      	b.n	8000f78 <LCD_voidWriteNum+0xa0>
		uint32_t reverse = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
		while (copy_u32Num != 0)
 8000f0c:	e017      	b.n	8000f3e <LCD_voidWriteNum+0x66>
			reverse = (reverse * 10) + (copy_u32Num % 10);
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <LCD_voidWriteNum+0xa8>)
 8000f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	1aca      	subs	r2, r1, r3
 8000f2e:	1883      	adds	r3, r0, r2
 8000f30:	60fb      	str	r3, [r7, #12]
			copy_u32Num /= 10;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <LCD_voidWriteNum+0xa8>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	08db      	lsrs	r3, r3, #3
 8000f3c:	607b      	str	r3, [r7, #4]
		while (copy_u32Num != 0)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1e4      	bne.n	8000f0e <LCD_voidWriteNum+0x36>
		while (reverse != 1)
 8000f44:	e015      	b.n	8000f72 <LCD_voidWriteNum+0x9a>
			LCD_voidWriteData((reverse % 10) + 48); // Write digit as character
 8000f46:	68f9      	ldr	r1, [r7, #12]
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <LCD_voidWriteNum+0xa8>)
 8000f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8000f4e:	08da      	lsrs	r2, r3, #3
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	1aca      	subs	r2, r1, r3
 8000f5a:	b2d3      	uxtb	r3, r2
 8000f5c:	3330      	adds	r3, #48	; 0x30
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fef1 	bl	8000d48 <LCD_voidWriteData>
			reverse /= 10;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <LCD_voidWriteNum+0xa8>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	60fb      	str	r3, [r7, #12]
		while (reverse != 1)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d1e6      	bne.n	8000f46 <LCD_voidWriteNum+0x6e>
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	cccccccd 	.word	0xcccccccd

08000f84 <HAL_TIM_IC_CaptureCallback>:

/**
 * @brief This function handles TIM1 capture compare interrupt.
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN voidTIM1_CC_IRQn 0 */

	if (State == 0) {
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d11d      	bne.n	8000fd2 <HAL_TIM_IC_CaptureCallback+0x4e>

		TIM1->CNT = 0x0;
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CCR1 = 0x0;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34


		//Input Capture Edge Select falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1 ,TIM_CHANNEL_1 ,TIM_INPUTCHANNELPOLARITY_FALLING) ;
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6a1a      	ldr	r2, [r3, #32]
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 020a 	bic.w	r2, r2, #10
 8000fb0:	621a      	str	r2, [r3, #32]
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6a1a      	ldr	r2, [r3, #32]
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f042 0202 	orr.w	r2, r2, #2
 8000fc0:	621a      	str	r2, [r3, #32]
		State++;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000fce:	701a      	strb	r2, [r3, #0]
	else {
		/*nothing**/
	}


}
 8000fd0:	e01e      	b.n	8001010 <HAL_TIM_IC_CaptureCallback+0x8c>
	else if (State == 1) {
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d119      	bne.n	8001010 <HAL_TIM_IC_CaptureCallback+0x8c>
		TIMEON = TIM1->CCR1;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000fe4:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1 ,TIM_CHANNEL_1 ,TIM_INPUTCHANNELPOLARITY_RISING) ;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a1a      	ldr	r2, [r3, #32]
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 020a 	bic.w	r2, r2, #10
 8000ff4:	621a      	str	r2, [r3, #32]
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a12      	ldr	r2, [r2, #32]
 8001000:	621a      	str	r2, [r3, #32]
		State++;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_TIM_IC_CaptureCallback+0x98>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	3301      	adds	r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_TIM_IC_CaptureCallback+0x98>)
 800100e:	701a      	strb	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200000aa 	.word	0x200000aa
 8001020:	40012c00 	.word	0x40012c00
 8001024:	20000360 	.word	0x20000360
 8001028:	200000a8 	.word	0x200000a8

0800102c <ICU_VoidGet_TON>:

/* USER CODE BEGIN 1 */
void ICU_VoidGet_TON( uint32_t*Copy_u32_TON_microSec) {
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]



	if (State == 2) {
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <ICU_VoidGet_TON+0x30>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d108      	bne.n	8001050 <ICU_VoidGet_TON+0x24>

		State = 0;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <ICU_VoidGet_TON+0x30>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]

		*Copy_u32_TON_microSec = (TIMEON );
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <ICU_VoidGet_TON+0x34>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	601a      	str	r2, [r3, #0]
	else {
		/*nothing*/
	}


}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000aa 	.word	0x200000aa
 8001060:	200000a8 	.word	0x200000a8

08001064 <UltraSonic_INIT>:

void UltraSonic_INIT(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn) ;
 8001068:	201b      	movs	r0, #27
 800106a:	f001 f886 	bl	800217a <HAL_NVIC_EnableIRQ>
	HAL_TIM_IC_Start_IT(&htim1 ,TIM_CHANNEL_1) ;
 800106e:	2100      	movs	r1, #0
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <UltraSonic_INIT+0x18>)
 8001072:	f002 f8ef 	bl	8003254 <HAL_TIM_IC_Start_IT>

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000360 	.word	0x20000360

08001080 <UltraSonic_Get_Distance>:

void UltraSonic_Get_Distance(float*Distance_CM) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]


	uint32_t TON_microSec =0 ;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001092:	4825      	ldr	r0, [pc, #148]	; (8001128 <UltraSonic_Get_Distance+0xa8>)
 8001094:	f001 fac2 	bl	800261c <HAL_GPIO_WritePin>
	vTaskDelay(3);
 8001098:	2003      	movs	r0, #3
 800109a:	f004 fc49 	bl	8005930 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a4:	4820      	ldr	r0, [pc, #128]	; (8001128 <UltraSonic_Get_Distance+0xa8>)
 80010a6:	f001 fab9 	bl	800261c <HAL_GPIO_WritePin>
	vTaskDelay(10);
 80010aa:	200a      	movs	r0, #10
 80010ac:	f004 fc40 	bl	8005930 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b6:	481c      	ldr	r0, [pc, #112]	; (8001128 <UltraSonic_Get_Distance+0xa8>)
 80010b8:	f001 fab0 	bl	800261c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <UltraSonic_Get_Distance+0xac>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <UltraSonic_Get_Distance+0xac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0202 	orr.w	r2, r2, #2
 80010ca:	60da      	str	r2, [r3, #12]
	// Sense ECHO to measure distance

	ICU_VoidGet_TON( &TON_microSec) ;
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ffab 	bl	800102c <ICU_VoidGet_TON>
	*Distance_CM = (velocity * TON_microSec/10000.0 )/ 2.0;    // CENTIMETER
 80010d6:	f240 1357 	movw	r3, #343	; 0x157
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	fb02 f303 	mul.w	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f976 	bl	80003d4 <__aeabi_ui2d>
 80010e8:	a30d      	add	r3, pc, #52	; (adr r3, 8001120 <UltraSonic_Get_Distance+0xa0>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fb15 	bl	800071c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001102:	f7ff fb0b 	bl	800071c <__aeabi_ddiv>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fbed 	bl	80008ec <__aeabi_d2f>
 8001112:	4602      	mov	r2, r0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	601a      	str	r2, [r3, #0]

}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	00000000 	.word	0x00000000
 8001124:	40c38800 	.word	0x40c38800
 8001128:	40010c00 	.word	0x40010c00
 800112c:	20000360 	.word	0x20000360

08001130 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4a06      	ldr	r2, [pc, #24]	; (8001158 <vApplicationGetIdleTaskMemory+0x28>)
 8001140:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4a05      	ldr	r2, [pc, #20]	; (800115c <vApplicationGetIdleTaskMemory+0x2c>)
 8001146:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	200000ac 	.word	0x200000ac
 800115c:	20000160 	.word	0x20000160

08001160 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001166:	f000 feb3 	bl	8001ed0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800116a:	f000 f85d 	bl	8001228 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800116e:	f000 fa15 	bl	800159c <MX_GPIO_Init>
	MX_TIM1_Init();
 8001172:	f000 f89b 	bl	80012ac <MX_TIM1_Init>
	MX_TIM3_Init();
 8001176:	f000 f8ef 	bl	8001358 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 800117a:	f000 f9bb 	bl	80014f4 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 800117e:	f000 f943 	bl	8001408 <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8001182:	f000 f9e1 	bl	8001548 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	EG_Action = xEventGroupCreate();
 8001186:	f003 ffef 	bl	8005168 <xEventGroupCreate>
 800118a:	4603      	mov	r3, r0
 800118c:	4a1f      	ldr	r2, [pc, #124]	; (800120c <main+0xac>)
 800118e:	6013      	str	r3, [r2, #0]
	EG_V2V = xEventGroupCreate();
 8001190:	f003 ffea 	bl	8005168 <xEventGroupCreate>
 8001194:	4603      	mov	r3, r0
 8001196:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <main+0xb0>)
 8001198:	6013      	str	r3, [r2, #0]
	xTaskCreate(BLE_Read_Task, NULL, 100 , NULL , 1 , NULL);
 800119a:	2300      	movs	r3, #0
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	2301      	movs	r3, #1
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2300      	movs	r3, #0
 80011a4:	2264      	movs	r2, #100	; 0x64
 80011a6:	2100      	movs	r1, #0
 80011a8:	481a      	ldr	r0, [pc, #104]	; (8001214 <main+0xb4>)
 80011aa:	f004 fa7c 	bl	80056a6 <xTaskCreate>
	xTaskCreate(V2V_Task, NULL, 100 , NULL , 2 , NULL);
 80011ae:	2300      	movs	r3, #0
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2300      	movs	r3, #0
 80011b8:	2264      	movs	r2, #100	; 0x64
 80011ba:	2100      	movs	r1, #0
 80011bc:	4816      	ldr	r0, [pc, #88]	; (8001218 <main+0xb8>)
 80011be:	f004 fa72 	bl	80056a6 <xTaskCreate>
	xTaskCreate(ACC_Task, NULL, 100 , NULL , 3 , NULL);
 80011c2:	2300      	movs	r3, #0
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	2303      	movs	r3, #3
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2300      	movs	r3, #0
 80011cc:	2264      	movs	r2, #100	; 0x64
 80011ce:	2100      	movs	r1, #0
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <main+0xbc>)
 80011d2:	f004 fa68 	bl	80056a6 <xTaskCreate>
	xTaskCreate(Action_Task, NULL, 100 , NULL , 4 , NULL);
 80011d6:	2300      	movs	r3, #0
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	2304      	movs	r3, #4
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2300      	movs	r3, #0
 80011e0:	2264      	movs	r2, #100	; 0x64
 80011e2:	2100      	movs	r1, #0
 80011e4:	480e      	ldr	r0, [pc, #56]	; (8001220 <main+0xc0>)
 80011e6:	f004 fa5e 	bl	80056a6 <xTaskCreate>
	xTaskCreate(Display_Task, NULL, 50 , NULL , 5 , NULL);
 80011ea:	2300      	movs	r3, #0
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	2305      	movs	r3, #5
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2300      	movs	r3, #0
 80011f4:	2232      	movs	r2, #50	; 0x32
 80011f6:	2100      	movs	r1, #0
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <main+0xc4>)
 80011fa:	f004 fa54 	bl	80056a6 <xTaskCreate>
	UltraSonic_INIT();
 80011fe:	f7ff ff31 	bl	8001064 <UltraSonic_INIT>
	DC_Motor_Init();
 8001202:	f7ff fc59 	bl	8000ab8 <DC_Motor_Init>

	vTaskStartScheduler();
 8001206:	f004 fbc7 	bl	8005998 <vTaskStartScheduler>
	/* Start scheduler */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800120a:	e7fe      	b.n	800120a <main+0xaa>
 800120c:	200004c8 	.word	0x200004c8
 8001210:	200004d0 	.word	0x200004d0
 8001214:	08001779 	.word	0x08001779
 8001218:	08001809 	.word	0x08001809
 800121c:	080018bd 	.word	0x080018bd
 8001220:	080019b1 	.word	0x080019b1
 8001224:	08001675 	.word	0x08001675

08001228 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b090      	sub	sp, #64	; 0x40
 800122c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	2228      	movs	r2, #40	; 0x28
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f005 fba8 	bl	800698c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124e:	2301      	movs	r3, #1
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001252:	2310      	movs	r3, #16
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800125a:	2300      	movs	r3, #0
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800125e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	4618      	mov	r0, r3
 800126a:	f001 f9ef 	bl	800264c <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8001274:	f000 fc24 	bl	8001ac0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001288:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2102      	movs	r1, #2
 8001292:	4618      	mov	r0, r3
 8001294:	f001 fc5c 	bl	8002b50 <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x7a>
	{
		Error_Handler();
 800129e:	f000 fc0f 	bl	8001ac0 <Error_Handler>
	}
}
 80012a2:	bf00      	nop
 80012a4:	3740      	adds	r7, #64	; 0x40
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <MX_TIM1_Init+0xa4>)
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <MX_TIM1_Init+0xa8>)
 80012cc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64-1;
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <MX_TIM1_Init+0xa4>)
 80012d0:	223f      	movs	r2, #63	; 0x3f
 80012d2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MX_TIM1_Init+0xa4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_TIM1_Init+0xa4>)
 80012dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_TIM1_Init+0xa4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_TIM1_Init+0xa4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_TIM1_Init+0xa4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80012f4:	4816      	ldr	r0, [pc, #88]	; (8001350 <MX_TIM1_Init+0xa4>)
 80012f6:	f001 ff5d 	bl	80031b4 <HAL_TIM_IC_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8001300:	f000 fbde 	bl	8001ac0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	480f      	ldr	r0, [pc, #60]	; (8001350 <MX_TIM1_Init+0xa4>)
 8001314:	f002 ffae 	bl	8004274 <HAL_TIMEx_MasterConfigSynchronization>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 800131e:	f000 fbcf 	bl	8001ac0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001326:	2301      	movs	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_TIM1_Init+0xa4>)
 800133a:	f002 f99f 	bl	800367c <HAL_TIM_IC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0x9c>
	{
		Error_Handler();
 8001344:	f000 fbbc 	bl	8001ac0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000360 	.word	0x20000360
 8001354:	40012c00 	.word	0x40012c00

08001358 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <MX_TIM3_Init+0xa8>)
 800137c:	4a21      	ldr	r2, [pc, #132]	; (8001404 <MX_TIM3_Init+0xac>)
 800137e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 32-1;
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_TIM3_Init+0xa8>)
 8001382:	221f      	movs	r2, #31
 8001384:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <MX_TIM3_Init+0xa8>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_TIM3_Init+0xa8>)
 800138e:	2263      	movs	r2, #99	; 0x63
 8001390:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_TIM3_Init+0xa8>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_TIM3_Init+0xa8>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800139e:	4818      	ldr	r0, [pc, #96]	; (8001400 <MX_TIM3_Init+0xa8>)
 80013a0:	f001 fdb3 	bl	8002f0a <HAL_TIM_PWM_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0x56>
	{
		Error_Handler();
 80013aa:	f000 fb89 	bl	8001ac0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	4619      	mov	r1, r3
 80013bc:	4810      	ldr	r0, [pc, #64]	; (8001400 <MX_TIM3_Init+0xa8>)
 80013be:	f002 ff59 	bl	8004274 <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM3_Init+0x74>
	{
		Error_Handler();
 80013c8:	f000 fb7a 	bl	8001ac0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013cc:	2360      	movs	r3, #96	; 0x60
 80013ce:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <MX_TIM3_Init+0xa8>)
 80013e4:	f002 f9e6 	bl	80037b4 <HAL_TIM_PWM_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 80013ee:	f000 fb67 	bl	8001ac0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80013f2:	4803      	ldr	r0, [pc, #12]	; (8001400 <MX_TIM3_Init+0xa8>)
 80013f4:	f000 fc26 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200003a8 	.word	0x200003a8
 8001404:	40000400 	.word	0x40000400

08001408 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <MX_TIM4_Init+0xe4>)
 800143a:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <MX_TIM4_Init+0xe8>)
 800143c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 32-1;
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <MX_TIM4_Init+0xe4>)
 8001440:	221f      	movs	r2, #31
 8001442:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <MX_TIM4_Init+0xe4>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100-1;
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <MX_TIM4_Init+0xe4>)
 800144c:	2263      	movs	r2, #99	; 0x63
 800144e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b26      	ldr	r3, [pc, #152]	; (80014ec <MX_TIM4_Init+0xe4>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <MX_TIM4_Init+0xe4>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800145c:	4823      	ldr	r0, [pc, #140]	; (80014ec <MX_TIM4_Init+0xe4>)
 800145e:	f001 fd05 	bl	8002e6c <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM4_Init+0x64>
	{
		Error_Handler();
 8001468:	f000 fb2a 	bl	8001ac0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001476:	4619      	mov	r1, r3
 8001478:	481c      	ldr	r0, [pc, #112]	; (80014ec <MX_TIM4_Init+0xe4>)
 800147a:	f002 fa5d 	bl	8003938 <HAL_TIM_ConfigClockSource>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM4_Init+0x80>
	{
		Error_Handler();
 8001484:	f000 fb1c 	bl	8001ac0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001488:	4818      	ldr	r0, [pc, #96]	; (80014ec <MX_TIM4_Init+0xe4>)
 800148a:	f001 fd3e 	bl	8002f0a <HAL_TIM_PWM_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM4_Init+0x90>
	{
		Error_Handler();
 8001494:	f000 fb14 	bl	8001ac0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	4619      	mov	r1, r3
 80014a6:	4811      	ldr	r0, [pc, #68]	; (80014ec <MX_TIM4_Init+0xe4>)
 80014a8:	f002 fee4 	bl	8004274 <HAL_TIMEx_MasterConfigSynchronization>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM4_Init+0xae>
	{
		Error_Handler();
 80014b2:	f000 fb05 	bl	8001ac0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b6:	2360      	movs	r3, #96	; 0x60
 80014b8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM4_Init+0xe4>)
 80014ce:	f002 f971 	bl	80037b4 <HAL_TIM_PWM_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM4_Init+0xd4>
	{
		Error_Handler();
 80014d8:	f000 faf2 	bl	8001ac0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM4_Init+0xe4>)
 80014de:	f000 fbb1 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 80014e2:	bf00      	nop
 80014e4:	3738      	adds	r7, #56	; 0x38
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200003f0 	.word	0x200003f0
 80014f0:	40000800 	.word	0x40000800

080014f4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_USART1_UART_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001500:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001504:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 800152c:	f002 ff12 	bl	8004354 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001536:	f000 fac3 	bl	8001ac0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000438 	.word	0x20000438
 8001544:	40013800 	.word	0x40013800

08001548 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_USART3_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 8001554:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001558:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 8001580:	f002 fee8 	bl	8004354 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800158a:	f000 fa99 	bl	8001ac0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000480 	.word	0x20000480
 8001598:	40004800 	.word	0x40004800

0800159c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a2c      	ldr	r2, [pc, #176]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a20      	ldr	r2, [pc, #128]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <MX_GPIO_Init+0xcc>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_GPIO_Init+0xcc>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001610:	2200      	movs	r2, #0
 8001612:	21bf      	movs	r1, #191	; 0xbf
 8001614:	4815      	ldr	r0, [pc, #84]	; (800166c <MX_GPIO_Init+0xd0>)
 8001616:	f001 f801 	bl	800261c <HAL_GPIO_WritePin>
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f248 0103 	movw	r1, #32771	; 0x8003
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <MX_GPIO_Init+0xd4>)
 8001622:	f000 fffb 	bl	800261c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001626:	23bf      	movs	r3, #191	; 0xbf
 8001628:	613b      	str	r3, [r7, #16]
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2302      	movs	r3, #2
 8001634:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4619      	mov	r1, r3
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <MX_GPIO_Init+0xd0>)
 800163e:	f000 fe69 	bl	8002314 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8001642:	f248 0303 	movw	r3, #32771	; 0x8003
 8001646:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2302      	movs	r3, #2
 8001652:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_GPIO_Init+0xd4>)
 800165c:	f000 fe5a 	bl	8002314 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	40010800 	.word	0x40010800
 8001670:	40010c00 	.word	0x40010c00

08001674 <Display_Task>:

/* USER CODE BEGIN 4 */

void Display_Task     (void  * argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Engine_State == 1)
 800167c:	4b31      	ldr	r3, [pc, #196]	; (8001744 <Display_Task+0xd0>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d159      	bne.n	8001738 <Display_Task+0xc4>
		{
			if((Distance < 10.0) && u8CLRState == 0 )
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <Display_Task+0xd4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4930      	ldr	r1, [pc, #192]	; (800174c <Display_Task+0xd8>)
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff f9cc 	bl	8000a28 <__aeabi_fcmplt>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <Display_Task+0x36>
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <Display_Task+0xdc>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <Display_Task+0x36>
			{
				u8CLRState = 1;
 800169e:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <Display_Task+0xdc>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
				LCD_voidClear();
 80016a4:	f7ff fbdc 	bl	8000e60 <LCD_voidClear>
 80016a8:	e00b      	b.n	80016c2 <Display_Task+0x4e>
			}
			else if(Distance > 10.0)
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <Display_Task+0xd4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4927      	ldr	r1, [pc, #156]	; (800174c <Display_Task+0xd8>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff f9d7 	bl	8000a64 <__aeabi_fcmpgt>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <Display_Task+0x4e>
			{
				u8CLRState = 0;
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <Display_Task+0xdc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
			}
			if(u8LCDFlagInit == 0)
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <Display_Task+0xe0>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <Display_Task+0x60>
			{
				LCD_voidInit();
 80016ca:	f7ff fa85 	bl	8000bd8 <LCD_voidInit>
				u8LCDFlagInit = 1;
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <Display_Task+0xe0>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
			}
			// Display ( Distance & Duty & ACC State On LCD)
			LCD_voidSetCursor(0, 0);
 80016d4:	2100      	movs	r1, #0
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fbcc 	bl	8000e74 <LCD_voidSetCursor>
			LCD_voidWriteString((uint8_t*)"Speed:");
 80016dc:	481e      	ldr	r0, [pc, #120]	; (8001758 <Display_Task+0xe4>)
 80016de:	f7ff fbe0 	bl	8000ea2 <LCD_voidWriteString>
			LCD_voidWriteNum(Duty);
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <Display_Task+0xe8>)
 80016e4:	f993 3000 	ldrsb.w	r3, [r3]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fbf5 	bl	8000ed8 <LCD_voidWriteNum>
			LCD_voidWriteString((uint8_t*)"%");
 80016ee:	481c      	ldr	r0, [pc, #112]	; (8001760 <Display_Task+0xec>)
 80016f0:	f7ff fbd7 	bl	8000ea2 <LCD_voidWriteString>
			LCD_voidSetCursor(1, 9);
 80016f4:	2109      	movs	r1, #9
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fbbc 	bl	8000e74 <LCD_voidSetCursor>
			LCD_voidWriteString((uint8_t*)"ACC:");
 80016fc:	4819      	ldr	r0, [pc, #100]	; (8001764 <Display_Task+0xf0>)
 80016fe:	f7ff fbd0 	bl	8000ea2 <LCD_voidWriteString>
			if(ACC_State==1)
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <Display_Task+0xf4>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d103      	bne.n	8001712 <Display_Task+0x9e>
			{
				LCD_voidWriteString((uint8_t*)" ON");
 800170a:	4818      	ldr	r0, [pc, #96]	; (800176c <Display_Task+0xf8>)
 800170c:	f7ff fbc9 	bl	8000ea2 <LCD_voidWriteString>
 8001710:	e002      	b.n	8001718 <Display_Task+0xa4>
			}
			else
			{
				LCD_voidWriteString((uint8_t*)"OFF");
 8001712:	4817      	ldr	r0, [pc, #92]	; (8001770 <Display_Task+0xfc>)
 8001714:	f7ff fbc5 	bl	8000ea2 <LCD_voidWriteString>
			}
			LCD_voidSetCursor(1, 0);
 8001718:	2100      	movs	r1, #0
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff fbaa 	bl	8000e74 <LCD_voidSetCursor>
			LCD_voidWriteString((uint8_t*)"Dist:");
 8001720:	4814      	ldr	r0, [pc, #80]	; (8001774 <Display_Task+0x100>)
 8001722:	f7ff fbbe 	bl	8000ea2 <LCD_voidWriteString>
			LCD_voidWriteNum(Distance);
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <Display_Task+0xd4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f9a4 	bl	8000a78 <__aeabi_f2uiz>
 8001730:	4603      	mov	r3, r0
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fbd0 	bl	8000ed8 <LCD_voidWriteNum>



		}
		vTaskDelay(500);
 8001738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800173c:	f004 f8f8 	bl	8005930 <vTaskDelay>
		if(Engine_State == 1)
 8001740:	e79c      	b.n	800167c <Display_Task+0x8>
 8001742:	bf00      	nop
 8001744:	200004da 	.word	0x200004da
 8001748:	200004dc 	.word	0x200004dc
 800174c:	41200000 	.word	0x41200000
 8001750:	200004e2 	.word	0x200004e2
 8001754:	200004e1 	.word	0x200004e1
 8001758:	08006b30 	.word	0x08006b30
 800175c:	200004d8 	.word	0x200004d8
 8001760:	08006b38 	.word	0x08006b38
 8001764:	08006b3c 	.word	0x08006b3c
 8001768:	200004d9 	.word	0x200004d9
 800176c:	08006b44 	.word	0x08006b44
 8001770:	08006b48 	.word	0x08006b48
 8001774:	08006b4c 	.word	0x08006b4c

08001778 <BLE_Read_Task>:
	}
}
void BLE_Read_Task    (void  * argument)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef RetValue = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
	uint8_t BLE_Rer_Arr[4]={0};
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		RetValue =  H_HC05_Recieve_Polling  (&BLE_Rer_Arr[0]);
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f9db 	bl	8000b48 <H_HC05_Recieve_Polling>
 8001792:	4603      	mov	r3, r0
 8001794:	73fb      	strb	r3, [r7, #15]
		if(RetValue == HAL_OK)
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d12f      	bne.n	80017fc <BLE_Read_Task+0x84>
		{
			switch(BLE_Rer_Arr[0])
 800179c:	7a3b      	ldrb	r3, [r7, #8]
 800179e:	2b45      	cmp	r3, #69	; 0x45
 80017a0:	d015      	beq.n	80017ce <BLE_Read_Task+0x56>
 80017a2:	2b53      	cmp	r3, #83	; 0x53
 80017a4:	d12a      	bne.n	80017fc <BLE_Read_Task+0x84>
			{
			case 'S' :
				switch(BLE_Rer_Arr[1])
 80017a6:	7a7b      	ldrb	r3, [r7, #9]
 80017a8:	2b30      	cmp	r3, #48	; 0x30
 80017aa:	d008      	beq.n	80017be <BLE_Read_Task+0x46>
 80017ac:	2b31      	cmp	r3, #49	; 0x31
 80017ae:	d122      	bne.n	80017f6 <BLE_Read_Task+0x7e>
				{
				case '1':
					xEventGroupSetBits(EG_Action,EG_SPEED_UP);
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <BLE_Read_Task+0x8c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2104      	movs	r1, #4
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fdbe 	bl	8005338 <xEventGroupSetBits>
					break;
 80017bc:	e006      	b.n	80017cc <BLE_Read_Task+0x54>
				case '0':
					xEventGroupSetBits(EG_Action,EG_SPEED_DOWN);
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <BLE_Read_Task+0x8c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2108      	movs	r1, #8
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fdb7 	bl	8005338 <xEventGroupSetBits>
					break;
 80017ca:	bf00      	nop
				}
				break;
 80017cc:	e013      	b.n	80017f6 <BLE_Read_Task+0x7e>

				case 'E' :

					switch(BLE_Rer_Arr[1])
 80017ce:	7a7b      	ldrb	r3, [r7, #9]
 80017d0:	2b30      	cmp	r3, #48	; 0x30
 80017d2:	d008      	beq.n	80017e6 <BLE_Read_Task+0x6e>
 80017d4:	2b31      	cmp	r3, #49	; 0x31
 80017d6:	d110      	bne.n	80017fa <BLE_Read_Task+0x82>
					{
					case '1':
						xEventGroupSetBits(EG_Action,EG_ENGINE_START );
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <BLE_Read_Task+0x8c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2101      	movs	r1, #1
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 fdaa 	bl	8005338 <xEventGroupSetBits>
						break;
 80017e4:	e006      	b.n	80017f4 <BLE_Read_Task+0x7c>
					case '0':
						xEventGroupSetBits(EG_Action,EG_ENGINE_STOP );
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <BLE_Read_Task+0x8c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2102      	movs	r1, #2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fda3 	bl	8005338 <xEventGroupSetBits>
						break;
 80017f2:	bf00      	nop
					}
					break;
 80017f4:	e001      	b.n	80017fa <BLE_Read_Task+0x82>
				break;
 80017f6:	bf00      	nop
 80017f8:	e000      	b.n	80017fc <BLE_Read_Task+0x84>
					break;
 80017fa:	bf00      	nop
		}
		else
		{

		}
		vTaskDelay(10);
 80017fc:	200a      	movs	r0, #10
 80017fe:	f004 f897 	bl	8005930 <vTaskDelay>
		RetValue =  H_HC05_Recieve_Polling  (&BLE_Rer_Arr[0]);
 8001802:	e7c1      	b.n	8001788 <BLE_Read_Task+0x10>
 8001804:	200004c8 	.word	0x200004c8

08001808 <V2V_Task>:
	}
}

void V2V_Task (void  * argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af02      	add	r7, sp, #8
 800180e:	6078      	str	r0, [r7, #4]
	uint8_t Local_8uLess10Mssg[4] = {'1','0','\r','\n'};
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <V2V_Task+0x94>)
 8001812:	60fb      	str	r3, [r7, #12]
	uint8_t Local_8uLess5Mssg [4] = {'0','5','\r','\n'};
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <V2V_Task+0x98>)
 8001816:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		EG_V2VValue = xEventGroupWaitBits(EG_V2V,
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <V2V_Task+0x9c>)
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	2201      	movs	r2, #1
 8001826:	2103      	movs	r1, #3
 8001828:	f003 fcb8 	bl	800519c <xEventGroupWaitBits>
 800182c:	4603      	mov	r3, r0
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <V2V_Task+0xa0>)
 8001830:	6013      	str	r3, [r2, #0]
				( EG_DIS_LESS_10 | EG_DIS_LESS_5) ,
				1, // Auto Clear
				0, // Or Between bits not wait for all of the events
				portMAX_DELAY);
		if(EG_V2VValue & EG_DIS_LESS_10)
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <V2V_Task+0xa0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d013      	beq.n	8001866 <V2V_Task+0x5e>
		{
			if(u8FlagLess10 == 1)
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <V2V_Task+0xa4>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10f      	bne.n	8001866 <V2V_Task+0x5e>
			{
				Counter++;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <V2V_Task+0xa8>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <V2V_Task+0xa8>)
 8001850:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, Local_8uLess10Mssg, 4, 100);
 8001852:	f107 010c 	add.w	r1, r7, #12
 8001856:	2364      	movs	r3, #100	; 0x64
 8001858:	2204      	movs	r2, #4
 800185a:	4816      	ldr	r0, [pc, #88]	; (80018b4 <V2V_Task+0xac>)
 800185c:	f002 fdca 	bl	80043f4 <HAL_UART_Transmit>
				u8FlagLess10=0;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <V2V_Task+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
			}
		}
		if(EG_V2VValue & EG_DIS_LESS_5)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <V2V_Task+0xa0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0d2      	beq.n	8001818 <V2V_Task+0x10>
		{
			if(u8FlagLess5 == 1)
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <V2V_Task+0xb0>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d1ce      	bne.n	8001818 <V2V_Task+0x10>
			{
				HAL_UART_Transmit(&huart1, Local_8uLess5Mssg, 4, 100);
 800187a:	f107 0108 	add.w	r1, r7, #8
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	2204      	movs	r2, #4
 8001882:	480c      	ldr	r0, [pc, #48]	; (80018b4 <V2V_Task+0xac>)
 8001884:	f002 fdb6 	bl	80043f4 <HAL_UART_Transmit>
				Counter--;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <V2V_Task+0xa8>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	3b01      	subs	r3, #1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <V2V_Task+0xa8>)
 8001892:	701a      	strb	r2, [r3, #0]
				u8FlagLess5=0;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <V2V_Task+0xb0>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
		EG_V2VValue = xEventGroupWaitBits(EG_V2V,
 800189a:	e7bd      	b.n	8001818 <V2V_Task+0x10>
 800189c:	0a0d3031 	.word	0x0a0d3031
 80018a0:	0a0d3530 	.word	0x0a0d3530
 80018a4:	200004d0 	.word	0x200004d0
 80018a8:	200004d4 	.word	0x200004d4
 80018ac:	20000000 	.word	0x20000000
 80018b0:	200004e0 	.word	0x200004e0
 80018b4:	20000438 	.word	0x20000438
 80018b8:	20000001 	.word	0x20000001

080018bc <ACC_Task>:
			}
		}
	}
}
void ACC_Task         (void  * argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	 * 3) if Distance < 10cm --> ACC on (Regulate the speed & change ACC Status & Yellow Led ON)
	 * 4) if Distance < 5cm  --> Stop The Car & Red Led ON & Buzzer ON
	 */
	while(1)
	{
		if(ENGINE_ON == Engine_State)
 80018c4:	4b31      	ldr	r3, [pc, #196]	; (800198c <ACC_Task+0xd0>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d15a      	bne.n	8001982 <ACC_Task+0xc6>
		{
			UltraSonic_Get_Distance(&Distance);
 80018cc:	4830      	ldr	r0, [pc, #192]	; (8001990 <ACC_Task+0xd4>)
 80018ce:	f7ff fbd7 	bl	8001080 <UltraSonic_Get_Distance>
			if(Distance > 10 )
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <ACC_Task+0xd4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	492f      	ldr	r1, [pc, #188]	; (8001994 <ACC_Task+0xd8>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f8c3 	bl	8000a64 <__aeabi_fcmpgt>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <ACC_Task+0x3c>
			{
				ACC_State = 0;
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <ACC_Task+0xdc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
				u8FlagLess10 = 1;
 80018ea:	4b2c      	ldr	r3, [pc, #176]	; (800199c <ACC_Task+0xe0>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
				u8FlagLess5 =  1;
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <ACC_Task+0xe4>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	e044      	b.n	8001982 <ACC_Task+0xc6>
			}
			else if(Distance <= 10.0 && Distance > 5.0)
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <ACC_Task+0xd4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4925      	ldr	r1, [pc, #148]	; (8001994 <ACC_Task+0xd8>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f89c 	bl	8000a3c <__aeabi_fcmple>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01f      	beq.n	800194a <ACC_Task+0x8e>
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <ACC_Task+0xd4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4925      	ldr	r1, [pc, #148]	; (80019a4 <ACC_Task+0xe8>)
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f8a7 	bl	8000a64 <__aeabi_fcmpgt>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d016      	beq.n	800194a <ACC_Task+0x8e>
			{
				ACC_State = 1;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <ACC_Task+0xdc>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
				Duty = 20;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <ACC_Task+0xec>)
 8001924:	2214      	movs	r2, #20
 8001926:	701a      	strb	r2, [r3, #0]
				DC_Motor_SetSpeed(Duty);
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <ACC_Task+0xec>)
 800192a:	f993 3000 	ldrsb.w	r3, [r3]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff f8db 	bl	8000aec <DC_Motor_SetSpeed>
				u8FlagLess5 =  1;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <ACC_Task+0xe4>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
				xEventGroupSetBits(EG_V2V, EG_DIS_LESS_10);
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <ACC_Task+0xf0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f003 fcf8 	bl	8005338 <xEventGroupSetBits>
 8001948:	e01b      	b.n	8001982 <ACC_Task+0xc6>
			}
			else if(Distance < 5.0)
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <ACC_Task+0xd4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4915      	ldr	r1, [pc, #84]	; (80019a4 <ACC_Task+0xe8>)
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff f869 	bl	8000a28 <__aeabi_fcmplt>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d012      	beq.n	8001982 <ACC_Task+0xc6>
			{
				ACC_State = 1;
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <ACC_Task+0xdc>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
				Duty = MOTOR_MIN_SPEED;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <ACC_Task+0xec>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
				DC_Motor_SetSpeed(Duty);
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <ACC_Task+0xec>)
 800196a:	f993 3000 	ldrsb.w	r3, [r3]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f8bb 	bl	8000aec <DC_Motor_SetSpeed>
				xEventGroupSetBits(EG_V2V, EG_DIS_LESS_5);
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <ACC_Task+0xf0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2102      	movs	r1, #2
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fcdb 	bl	8005338 <xEventGroupSetBits>
			else
			{

			}
		}
		vTaskDelay(250);
 8001982:	20fa      	movs	r0, #250	; 0xfa
 8001984:	f003 ffd4 	bl	8005930 <vTaskDelay>
		if(ENGINE_ON == Engine_State)
 8001988:	e79c      	b.n	80018c4 <ACC_Task+0x8>
 800198a:	bf00      	nop
 800198c:	200004da 	.word	0x200004da
 8001990:	200004dc 	.word	0x200004dc
 8001994:	41200000 	.word	0x41200000
 8001998:	200004d9 	.word	0x200004d9
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000001 	.word	0x20000001
 80019a4:	40a00000 	.word	0x40a00000
 80019a8:	200004d8 	.word	0x200004d8
 80019ac:	200004d0 	.word	0x200004d0

080019b0 <Action_Task>:
	}
}
void Action_Task      (void  * argument)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		EG_Value = xEventGroupWaitBits(EG_Action,
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <Action_Task+0x100>)
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2300      	movs	r3, #0
 80019c4:	2201      	movs	r2, #1
 80019c6:	210f      	movs	r1, #15
 80019c8:	f003 fbe8 	bl	800519c <xEventGroupWaitBits>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a39      	ldr	r2, [pc, #228]	; (8001ab4 <Action_Task+0x104>)
 80019d0:	6013      	str	r3, [r2, #0]
				(EG_ENGINE_START | EG_ENGINE_STOP | EG_SPEED_UP | EG_SPEED_DOWN) ,
				1, // Auto Clear
				0, // Or Between bits not wait for all of the events
				portMAX_DELAY);

		if(EG_Value & EG_ENGINE_START)
 80019d2:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <Action_Task+0x104>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d004      	beq.n	80019e8 <Action_Task+0x38>
		{
			// Start Motor with Duty 50%
			DC_Motor_Init();
 80019de:	f7ff f86b 	bl	8000ab8 <DC_Motor_Init>
			Engine_State = ENGINE_ON;
 80019e2:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <Action_Task+0x108>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
		}
		if(EG_Value & EG_ENGINE_STOP)
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <Action_Task+0x104>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <Action_Task+0x54>
		{
			// Stop Motor Duty 0%
			Duty =0;
 80019f4:	4b31      	ldr	r3, [pc, #196]	; (8001abc <Action_Task+0x10c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
			DC_Motor_STOP();
 80019fa:	f7ff f88b 	bl	8000b14 <DC_Motor_STOP>
			Engine_State = ENGINE_OFF;
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <Action_Task+0x108>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
		}
		if(EG_Value & EG_SPEED_UP)
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <Action_Task+0x104>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d023      	beq.n	8001a58 <Action_Task+0xa8>
		{
			if(ENGINE_ON == Engine_State)
 8001a10:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <Action_Task+0x108>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d11f      	bne.n	8001a58 <Action_Task+0xa8>
			{
				Duty+=10;
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <Action_Task+0x10c>)
 8001a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	330a      	adds	r3, #10
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	b25a      	sxtb	r2, r3
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <Action_Task+0x10c>)
 8001a28:	701a      	strb	r2, [r3, #0]
				if(MOTOR_MAX_SPEED < Duty)
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <Action_Task+0x10c>)
 8001a2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	dd0a      	ble.n	8001a4a <Action_Task+0x9a>
				{
					Duty=MOTOR_MAX_SPEED;
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <Action_Task+0x10c>)
 8001a36:	2264      	movs	r2, #100	; 0x64
 8001a38:	701a      	strb	r2, [r3, #0]
					DC_Motor_SetSpeed(Duty);
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <Action_Task+0x10c>)
 8001a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f852 	bl	8000aec <DC_Motor_SetSpeed>
 8001a48:	e006      	b.n	8001a58 <Action_Task+0xa8>
				}
				else
				{
					DC_Motor_SetSpeed(Duty);
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <Action_Task+0x10c>)
 8001a4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f84a 	bl	8000aec <DC_Motor_SetSpeed>
				}
			}
		}
		if(EG_Value & EG_SPEED_DOWN)
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <Action_Task+0x104>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0a9      	beq.n	80019b8 <Action_Task+0x8>
		{
			if(ENGINE_ON == Engine_State)
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <Action_Task+0x108>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d1a5      	bne.n	80019b8 <Action_Task+0x8>
			{
				Duty-=10;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <Action_Task+0x10c>)
 8001a6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	3b0a      	subs	r3, #10
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	b25a      	sxtb	r2, r3
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <Action_Task+0x10c>)
 8001a7c:	701a      	strb	r2, [r3, #0]
				if(MOTOR_MIN_SPEED > Duty)
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <Action_Task+0x10c>)
 8001a80:	f993 3000 	ldrsb.w	r3, [r3]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da0a      	bge.n	8001a9e <Action_Task+0xee>
				{
					Duty = MOTOR_MIN_SPEED;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <Action_Task+0x10c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
					DC_Motor_SetSpeed(Duty);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <Action_Task+0x10c>)
 8001a90:	f993 3000 	ldrsb.w	r3, [r3]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f828 	bl	8000aec <DC_Motor_SetSpeed>
 8001a9c:	e78c      	b.n	80019b8 <Action_Task+0x8>
				}
				else
				{
					DC_Motor_SetSpeed(Duty);
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <Action_Task+0x10c>)
 8001aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f820 	bl	8000aec <DC_Motor_SetSpeed>
		EG_Value = xEventGroupWaitBits(EG_Action,
 8001aac:	e784      	b.n	80019b8 <Action_Task+0x8>
 8001aae:	bf00      	nop
 8001ab0:	200004c8 	.word	0x200004c8
 8001ab4:	200004cc 	.word	0x200004cc
 8001ab8:	200004da 	.word	0x200004da
 8001abc:	200004d8 	.word	0x200004d8

08001ac0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x8>
	...

08001acc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_MspInit+0x68>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <HAL_MspInit+0x68>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6193      	str	r3, [r2, #24]
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_MspInit+0x68>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_MspInit+0x68>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <HAL_MspInit+0x68>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_MspInit+0x68>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	210f      	movs	r1, #15
 8001b06:	f06f 0001 	mvn.w	r0, #1
 8001b0a:	f000 fb1a 	bl	8002142 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_MspInit+0x6c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_MspInit+0x6c>)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000

08001b3c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1a      	ldr	r2, [pc, #104]	; (8001bc0 <HAL_TIM_IC_MspInit+0x84>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d12c      	bne.n	8001bb6 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_TIM_IC_MspInit+0x88>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <HAL_TIM_IC_MspInit+0x88>)
 8001b62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <HAL_TIM_IC_MspInit+0x88>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_TIM_IC_MspInit+0x88>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <HAL_TIM_IC_MspInit+0x88>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_TIM_IC_MspInit+0x88>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <HAL_TIM_IC_MspInit+0x8c>)
 8001ba2:	f000 fbb7 	bl	8002314 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2105      	movs	r1, #5
 8001baa:	201b      	movs	r0, #27
 8001bac:	f000 fac9 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bb0:	201b      	movs	r0, #27
 8001bb2:	f000 fae2 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010800 	.word	0x40010800

08001bcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_TIM_PWM_MspInit+0x34>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_TIM_PWM_MspInit+0x38>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_TIM_PWM_MspInit+0x38>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	61d3      	str	r3, [r2, #28]
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_TIM_PWM_MspInit+0x38>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	40000400 	.word	0x40000400
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_TIM_Base_MspInit+0x34>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d10b      	bne.n	8001c32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_TIM_Base_MspInit+0x38>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_TIM_Base_MspInit+0x38>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_TIM_Base_MspInit+0x38>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40000800 	.word	0x40000800
 8001c40:	40021000 	.word	0x40021000

08001c44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <HAL_TIM_MspPostInit+0x94>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d118      	bne.n	8001c96 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_TIM_MspPostInit+0x98>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <HAL_TIM_MspPostInit+0x98>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_TIM_MspPostInit+0x98>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c7c:	2340      	movs	r3, #64	; 0x40
 8001c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2302      	movs	r3, #2
 8001c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4814      	ldr	r0, [pc, #80]	; (8001ce0 <HAL_TIM_MspPostInit+0x9c>)
 8001c90:	f000 fb40 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c94:	e01c      	b.n	8001cd0 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_TIM_MspPostInit+0xa0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d117      	bne.n	8001cd0 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_TIM_MspPostInit+0x98>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_TIM_MspPostInit+0x98>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_TIM_MspPostInit+0x98>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cb8:	2340      	movs	r3, #64	; 0x40
 8001cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <HAL_TIM_MspPostInit+0xa4>)
 8001ccc:	f000 fb22 	bl	8002314 <HAL_GPIO_Init>
}
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010800 	.word	0x40010800
 8001ce4:	40000800 	.word	0x40000800
 8001ce8:	40010c00 	.word	0x40010c00

08001cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0318 	add.w	r3, r7, #24
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3c      	ldr	r2, [pc, #240]	; (8001df8 <HAL_UART_MspInit+0x10c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d132      	bne.n	8001d72 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d0c:	4b3b      	ldr	r3, [pc, #236]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a3a      	ldr	r2, [pc, #232]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a34      	ldr	r2, [pc, #208]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b32      	ldr	r3, [pc, #200]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0318 	add.w	r3, r7, #24
 8001d4e:	4619      	mov	r1, r3
 8001d50:	482b      	ldr	r0, [pc, #172]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d52:	f000 fadf 	bl	8002314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 0318 	add.w	r3, r7, #24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4825      	ldr	r0, [pc, #148]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d6c:	f000 fad2 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d70:	e03e      	b.n	8001df0 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <HAL_UART_MspInit+0x118>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d139      	bne.n	8001df0 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d86:	61d3      	str	r3, [r2, #28]
 8001d88:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 0318 	add.w	r3, r7, #24
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4811      	ldr	r0, [pc, #68]	; (8001e08 <HAL_UART_MspInit+0x11c>)
 8001dc2:	f000 faa7 	bl	8002314 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480b      	ldr	r0, [pc, #44]	; (8001e08 <HAL_UART_MspInit+0x11c>)
 8001ddc:	f000 fa9a 	bl	8002314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2105      	movs	r1, #5
 8001de4:	2027      	movs	r0, #39	; 0x27
 8001de6:	f000 f9ac 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dea:	2027      	movs	r0, #39	; 0x27
 8001dec:	f000 f9c5 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	; 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40013800 	.word	0x40013800
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010800 	.word	0x40010800
 8001e04:	40004800 	.word	0x40004800
 8001e08:	40010c00 	.word	0x40010c00

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3a:	f000 f88f 	bl	8001f5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001e3e:	f004 f95b 	bl	80060f8 <xTaskGetSchedulerState>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d001      	beq.n	8001e4c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001e48:	f004 fb5e 	bl	8006508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <TIM1_CC_IRQHandler+0x10>)
 8001e56:	f001 fb09 	bl	800346c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000360 	.word	0x20000360

08001e64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <USART3_IRQHandler+0x10>)
 8001e6a:	f002 fbfd 	bl	8004668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000480 	.word	0x20000480

08001e78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e84:	f7ff fff8 	bl	8001e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e8a:	490c      	ldr	r1, [pc, #48]	; (8001ebc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e90:	e002      	b.n	8001e98 <LoopCopyDataInit>

08001e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e96:	3304      	adds	r3, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e9c:	d3f9      	bcc.n	8001e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ea0:	4c09      	ldr	r4, [pc, #36]	; (8001ec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea4:	e001      	b.n	8001eaa <LoopFillZerobss>

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea8:	3204      	adds	r2, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eae:	f004 fd47 	bl	8006940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eb2:	f7ff f955 	bl	8001160 <main>
  bx lr
 8001eb6:	4770      	bx	lr
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ec0:	08006bf0 	.word	0x08006bf0
  ldr r2, =_sbss
 8001ec4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ec8:	2000123c 	.word	0x2000123c

08001ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC1_2_IRQHandler>
	...

08001ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_Init+0x28>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_Init+0x28>)
 8001eda:	f043 0310 	orr.w	r3, r3, #16
 8001ede:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f923 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f000 f808 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fdee 	bl	8001acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40022000 	.word	0x40022000

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_InitTick+0x54>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_InitTick+0x58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f93b 	bl	8002196 <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 f903 	bl	8002142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_InitTick+0x5c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000004 	.word	0x20000004
 8001f54:	2000000c 	.word	0x2000000c
 8001f58:	20000008 	.word	0x20000008

08001f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_IncTick+0x1c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_IncTick+0x20>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <HAL_IncTick+0x20>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	2000000c 	.word	0x2000000c
 8001f7c:	200004e4 	.word	0x200004e4

08001f80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <HAL_GetTick+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	200004e4 	.word	0x200004e4

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4906      	ldr	r1, [pc, #24]	; (800202c <__NVIC_EnableIRQ+0x34>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f7ff ff90 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff2d 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff42 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff90 	bl	8002084 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5f 	bl	8002030 <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff35 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa2 	bl	80020e8 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d008      	beq.n	80021d8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2204      	movs	r2, #4
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e020      	b.n	800221a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 020e 	bic.w	r2, r2, #14
 80021e6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f202 	lsl.w	r2, r1, r2
 8002206:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d005      	beq.n	8002248 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2204      	movs	r2, #4
 8002240:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	e051      	b.n	80022ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 020e 	bic.w	r2, r2, #14
 8002256:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <HAL_DMA_Abort_IT+0xd4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d029      	beq.n	80022c6 <HAL_DMA_Abort_IT+0xa2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a21      	ldr	r2, [pc, #132]	; (80022fc <HAL_DMA_Abort_IT+0xd8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d022      	beq.n	80022c2 <HAL_DMA_Abort_IT+0x9e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_DMA_Abort_IT+0xdc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01a      	beq.n	80022bc <HAL_DMA_Abort_IT+0x98>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_DMA_Abort_IT+0xe0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d012      	beq.n	80022b6 <HAL_DMA_Abort_IT+0x92>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_DMA_Abort_IT+0xe4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00a      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x8c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_DMA_Abort_IT+0xe8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d102      	bne.n	80022aa <HAL_DMA_Abort_IT+0x86>
 80022a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022a8:	e00e      	b.n	80022c8 <HAL_DMA_Abort_IT+0xa4>
 80022aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ae:	e00b      	b.n	80022c8 <HAL_DMA_Abort_IT+0xa4>
 80022b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b4:	e008      	b.n	80022c8 <HAL_DMA_Abort_IT+0xa4>
 80022b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ba:	e005      	b.n	80022c8 <HAL_DMA_Abort_IT+0xa4>
 80022bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c0:	e002      	b.n	80022c8 <HAL_DMA_Abort_IT+0xa4>
 80022c2:	2310      	movs	r3, #16
 80022c4:	e000      	b.n	80022c8 <HAL_DMA_Abort_IT+0xa4>
 80022c6:	2301      	movs	r3, #1
 80022c8:	4a11      	ldr	r2, [pc, #68]	; (8002310 <HAL_DMA_Abort_IT+0xec>)
 80022ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
    } 
  }
  return status;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40020008 	.word	0x40020008
 80022fc:	4002001c 	.word	0x4002001c
 8002300:	40020030 	.word	0x40020030
 8002304:	40020044 	.word	0x40020044
 8002308:	40020058 	.word	0x40020058
 800230c:	4002006c 	.word	0x4002006c
 8002310:	40020000 	.word	0x40020000

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b08b      	sub	sp, #44	; 0x2c
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002326:	e169      	b.n	80025fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002328:	2201      	movs	r2, #1
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	429a      	cmp	r2, r3
 8002342:	f040 8158 	bne.w	80025f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4a9a      	ldr	r2, [pc, #616]	; (80025b4 <HAL_GPIO_Init+0x2a0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d05e      	beq.n	800240e <HAL_GPIO_Init+0xfa>
 8002350:	4a98      	ldr	r2, [pc, #608]	; (80025b4 <HAL_GPIO_Init+0x2a0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d875      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 8002356:	4a98      	ldr	r2, [pc, #608]	; (80025b8 <HAL_GPIO_Init+0x2a4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d058      	beq.n	800240e <HAL_GPIO_Init+0xfa>
 800235c:	4a96      	ldr	r2, [pc, #600]	; (80025b8 <HAL_GPIO_Init+0x2a4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d86f      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 8002362:	4a96      	ldr	r2, [pc, #600]	; (80025bc <HAL_GPIO_Init+0x2a8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d052      	beq.n	800240e <HAL_GPIO_Init+0xfa>
 8002368:	4a94      	ldr	r2, [pc, #592]	; (80025bc <HAL_GPIO_Init+0x2a8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d869      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 800236e:	4a94      	ldr	r2, [pc, #592]	; (80025c0 <HAL_GPIO_Init+0x2ac>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d04c      	beq.n	800240e <HAL_GPIO_Init+0xfa>
 8002374:	4a92      	ldr	r2, [pc, #584]	; (80025c0 <HAL_GPIO_Init+0x2ac>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d863      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 800237a:	4a92      	ldr	r2, [pc, #584]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d046      	beq.n	800240e <HAL_GPIO_Init+0xfa>
 8002380:	4a90      	ldr	r2, [pc, #576]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d85d      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 8002386:	2b12      	cmp	r3, #18
 8002388:	d82a      	bhi.n	80023e0 <HAL_GPIO_Init+0xcc>
 800238a:	2b12      	cmp	r3, #18
 800238c:	d859      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 800238e:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <HAL_GPIO_Init+0x80>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	0800240f 	.word	0x0800240f
 8002398:	080023e9 	.word	0x080023e9
 800239c:	080023fb 	.word	0x080023fb
 80023a0:	0800243d 	.word	0x0800243d
 80023a4:	08002443 	.word	0x08002443
 80023a8:	08002443 	.word	0x08002443
 80023ac:	08002443 	.word	0x08002443
 80023b0:	08002443 	.word	0x08002443
 80023b4:	08002443 	.word	0x08002443
 80023b8:	08002443 	.word	0x08002443
 80023bc:	08002443 	.word	0x08002443
 80023c0:	08002443 	.word	0x08002443
 80023c4:	08002443 	.word	0x08002443
 80023c8:	08002443 	.word	0x08002443
 80023cc:	08002443 	.word	0x08002443
 80023d0:	08002443 	.word	0x08002443
 80023d4:	08002443 	.word	0x08002443
 80023d8:	080023f1 	.word	0x080023f1
 80023dc:	08002405 	.word	0x08002405
 80023e0:	4a79      	ldr	r2, [pc, #484]	; (80025c8 <HAL_GPIO_Init+0x2b4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023e6:	e02c      	b.n	8002442 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	623b      	str	r3, [r7, #32]
          break;
 80023ee:	e029      	b.n	8002444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	3304      	adds	r3, #4
 80023f6:	623b      	str	r3, [r7, #32]
          break;
 80023f8:	e024      	b.n	8002444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	3308      	adds	r3, #8
 8002400:	623b      	str	r3, [r7, #32]
          break;
 8002402:	e01f      	b.n	8002444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	330c      	adds	r3, #12
 800240a:	623b      	str	r3, [r7, #32]
          break;
 800240c:	e01a      	b.n	8002444 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002416:	2304      	movs	r3, #4
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e013      	b.n	8002444 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d105      	bne.n	8002430 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002424:	2308      	movs	r3, #8
 8002426:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	611a      	str	r2, [r3, #16]
          break;
 800242e:	e009      	b.n	8002444 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002430:	2308      	movs	r3, #8
 8002432:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	615a      	str	r2, [r3, #20]
          break;
 800243a:	e003      	b.n	8002444 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
          break;
 8002440:	e000      	b.n	8002444 <HAL_GPIO_Init+0x130>
          break;
 8002442:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2bff      	cmp	r3, #255	; 0xff
 8002448:	d801      	bhi.n	800244e <HAL_GPIO_Init+0x13a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	e001      	b.n	8002452 <HAL_GPIO_Init+0x13e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2bff      	cmp	r3, #255	; 0xff
 8002458:	d802      	bhi.n	8002460 <HAL_GPIO_Init+0x14c>
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	e002      	b.n	8002466 <HAL_GPIO_Init+0x152>
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	3b08      	subs	r3, #8
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	210f      	movs	r1, #15
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	401a      	ands	r2, r3
 8002478:	6a39      	ldr	r1, [r7, #32]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	431a      	orrs	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80b1 	beq.w	80025f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002494:	4b4d      	ldr	r3, [pc, #308]	; (80025cc <HAL_GPIO_Init+0x2b8>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	4a4c      	ldr	r2, [pc, #304]	; (80025cc <HAL_GPIO_Init+0x2b8>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6193      	str	r3, [r2, #24]
 80024a0:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <HAL_GPIO_Init+0x2b8>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024ac:	4a48      	ldr	r2, [pc, #288]	; (80025d0 <HAL_GPIO_Init+0x2bc>)
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a40      	ldr	r2, [pc, #256]	; (80025d4 <HAL_GPIO_Init+0x2c0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d013      	beq.n	8002500 <HAL_GPIO_Init+0x1ec>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a3f      	ldr	r2, [pc, #252]	; (80025d8 <HAL_GPIO_Init+0x2c4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00d      	beq.n	80024fc <HAL_GPIO_Init+0x1e8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3e      	ldr	r2, [pc, #248]	; (80025dc <HAL_GPIO_Init+0x2c8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d007      	beq.n	80024f8 <HAL_GPIO_Init+0x1e4>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3d      	ldr	r2, [pc, #244]	; (80025e0 <HAL_GPIO_Init+0x2cc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d101      	bne.n	80024f4 <HAL_GPIO_Init+0x1e0>
 80024f0:	2303      	movs	r3, #3
 80024f2:	e006      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024f4:	2304      	movs	r3, #4
 80024f6:	e004      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e002      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 8002500:	2300      	movs	r3, #0
 8002502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002504:	f002 0203 	and.w	r2, r2, #3
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	4093      	lsls	r3, r2
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002512:	492f      	ldr	r1, [pc, #188]	; (80025d0 <HAL_GPIO_Init+0x2bc>)
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	492c      	ldr	r1, [pc, #176]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	43db      	mvns	r3, r3
 8002542:	4928      	ldr	r1, [pc, #160]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002544:	4013      	ands	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002554:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4922      	ldr	r1, [pc, #136]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	491e      	ldr	r1, [pc, #120]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 800256c:	4013      	ands	r3, r2
 800256e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4918      	ldr	r1, [pc, #96]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	4914      	ldr	r1, [pc, #80]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002594:	4013      	ands	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d021      	beq.n	80025e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	490e      	ldr	r1, [pc, #56]	; (80025e4 <HAL_GPIO_Init+0x2d0>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e021      	b.n	80025f6 <HAL_GPIO_Init+0x2e2>
 80025b2:	bf00      	nop
 80025b4:	10320000 	.word	0x10320000
 80025b8:	10310000 	.word	0x10310000
 80025bc:	10220000 	.word	0x10220000
 80025c0:	10210000 	.word	0x10210000
 80025c4:	10120000 	.word	0x10120000
 80025c8:	10110000 	.word	0x10110000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40010000 	.word	0x40010000
 80025d4:	40010800 	.word	0x40010800
 80025d8:	40010c00 	.word	0x40010c00
 80025dc:	40011000 	.word	0x40011000
 80025e0:	40011400 	.word	0x40011400
 80025e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_GPIO_Init+0x304>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	4909      	ldr	r1, [pc, #36]	; (8002618 <HAL_GPIO_Init+0x304>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	3301      	adds	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	f47f ae8e 	bne.w	8002328 <HAL_GPIO_Init+0x14>
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	372c      	adds	r7, #44	; 0x2c
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002638:	e003      	b.n	8002642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	041a      	lsls	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e272      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8087 	beq.w	800277a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266c:	4b92      	ldr	r3, [pc, #584]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00c      	beq.n	8002692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002678:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d112      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
 8002684:	4b8c      	ldr	r3, [pc, #560]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d10b      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002692:	4b89      	ldr	r3, [pc, #548]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d06c      	beq.n	8002778 <HAL_RCC_OscConfig+0x12c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d168      	bne.n	8002778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e24c      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x76>
 80026b4:	4b80      	ldr	r3, [pc, #512]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a7f      	ldr	r2, [pc, #508]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e02e      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x98>
 80026ca:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b78      	ldr	r3, [pc, #480]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a77      	ldr	r2, [pc, #476]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0xbc>
 80026ee:	4b72      	ldr	r3, [pc, #456]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a71      	ldr	r2, [pc, #452]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b6f      	ldr	r3, [pc, #444]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6e      	ldr	r2, [pc, #440]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 8002708:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6a      	ldr	r2, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a67      	ldr	r2, [pc, #412]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff fc2a 	bl	8001f80 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff fc26 	bl	8001f80 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e200      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xe4>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff fc16 	bl	8001f80 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7ff fc12 	bl	8001f80 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1ec      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x10c>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002786:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002792:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
 800279e:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1c0      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4939      	ldr	r1, [pc, #228]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e03a      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCC_OscConfig+0x270>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7ff fbcb 	bl	8001f80 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7ff fbc7 	bl	8001f80 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1a1      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4927      	ldr	r1, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_RCC_OscConfig+0x270>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff fbaa 	bl	8001f80 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7ff fba6 	bl	8001f80 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e180      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d03a      	beq.n	80028d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d019      	beq.n	8002896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7ff fb8a 	bl	8001f80 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7ff fb86 	bl	8001f80 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e160      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800288e:	2001      	movs	r0, #1
 8002890:	f000 face 	bl	8002e30 <RCC_Delay>
 8002894:	e01c      	b.n	80028d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289c:	f7ff fb70 	bl	8001f80 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a2:	e00f      	b.n	80028c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7ff fb6c 	bl	8001f80 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d908      	bls.n	80028c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e146      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	42420000 	.word	0x42420000
 80028c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b92      	ldr	r3, [pc, #584]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e9      	bne.n	80028a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a6 	beq.w	8002a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b8b      	ldr	r3, [pc, #556]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	4b88      	ldr	r3, [pc, #544]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a87      	ldr	r2, [pc, #540]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	61d3      	str	r3, [r2, #28]
 80028fa:	4b85      	ldr	r3, [pc, #532]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b82      	ldr	r3, [pc, #520]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b7f      	ldr	r3, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7e      	ldr	r2, [pc, #504]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7ff fb2d 	bl	8001f80 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7ff fb29 	bl	8001f80 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	; 0x64
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e103      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b75      	ldr	r3, [pc, #468]	; (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x312>
 8002950:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a6e      	ldr	r2, [pc, #440]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	e02d      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x334>
 8002966:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6213      	str	r3, [r2, #32]
 8002972:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a66      	ldr	r2, [pc, #408]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	e01c      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x356>
 8002988:	4b61      	ldr	r3, [pc, #388]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a60      	ldr	r2, [pc, #384]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	4b5e      	ldr	r3, [pc, #376]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a5d      	ldr	r2, [pc, #372]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	e00b      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 80029a2:	4b5b      	ldr	r3, [pc, #364]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a5a      	ldr	r2, [pc, #360]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	4b58      	ldr	r3, [pc, #352]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 0304 	bic.w	r3, r3, #4
 80029b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d015      	beq.n	80029ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7ff fadd 	bl	8001f80 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7ff fad9 	bl	8001f80 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0b1      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ee      	beq.n	80029ca <HAL_RCC_OscConfig+0x37e>
 80029ec:	e014      	b.n	8002a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7ff fac7 	bl	8001f80 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7ff fac3 	bl	8001f80 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e09b      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ee      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a3b      	ldr	r2, [pc, #236]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8087 	beq.w	8002b42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d061      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d146      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7ff fa97 	bl	8001f80 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7ff fa93 	bl	8001f80 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e06d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d108      	bne.n	8002a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4921      	ldr	r1, [pc, #132]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a19      	ldr	r1, [r3, #32]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	491b      	ldr	r1, [pc, #108]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7ff fa67 	bl	8001f80 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7ff fa63 	bl	8001f80 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e03d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46a>
 8002ad4:	e035      	b.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7ff fa50 	bl	8001f80 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7ff fa4c 	bl	8001f80 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e026      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x498>
 8002b02:	e01e      	b.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e019      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_OscConfig+0x500>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d0      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d910      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4965      	ldr	r1, [pc, #404]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b8      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bac:	4b59      	ldr	r3, [pc, #356]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a58      	ldr	r2, [pc, #352]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc4:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b50      	ldr	r3, [pc, #320]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	494d      	ldr	r1, [pc, #308]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d040      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d115      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e073      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06b      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4936      	ldr	r1, [pc, #216]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c40:	f7ff f99e 	bl	8001f80 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7ff f99a 	bl	8001f80 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e053      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d210      	bcs.n	8002ca0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 0207 	bic.w	r2, r3, #7
 8002c86:	4922      	ldr	r1, [pc, #136]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e032      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4916      	ldr	r1, [pc, #88]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	490e      	ldr	r1, [pc, #56]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cde:	f000 f821 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	490a      	ldr	r1, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	5ccb      	ldrb	r3, [r1, r3]
 8002cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf6:	4a09      	ldr	r2, [pc, #36]	; (8002d1c <HAL_RCC_ClockConfig+0x1cc>)
 8002cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_ClockConfig+0x1d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff f8fc 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08006b5c 	.word	0x08006b5c
 8002d1c:	20000004 	.word	0x20000004
 8002d20:	20000008 	.word	0x20000008

08002d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d002      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x30>
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_GetSysClockFreq+0x36>
 8002d52:	e027      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d56:	613b      	str	r3, [r7, #16]
      break;
 8002d58:	e027      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	0c9b      	lsrs	r3, r3, #18
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
 8002d66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d010      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	0c5b      	lsrs	r3, r3, #17
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	4a11      	ldr	r2, [pc, #68]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d7e:	5cd3      	ldrb	r3, [r2, r3]
 8002d80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d86:	fb03 f202 	mul.w	r2, r3, r2
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e004      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	613b      	str	r3, [r7, #16]
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002da6:	613b      	str	r3, [r7, #16]
      break;
 8002da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002daa:	693b      	ldr	r3, [r7, #16]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	007a1200 	.word	0x007a1200
 8002dc0:	08006b74 	.word	0x08006b74
 8002dc4:	08006b84 	.word	0x08006b84
 8002dc8:	003d0900 	.word	0x003d0900

08002dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	20000004 	.word	0x20000004

08002de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002de4:	f7ff fff2 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08006b6c 	.word	0x08006b6c

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e0c:	f7ff ffde 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	0adb      	lsrs	r3, r3, #11
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	; (8002e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08006b6c 	.word	0x08006b6c

08002e30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <RCC_Delay+0x34>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <RCC_Delay+0x38>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	0a5b      	lsrs	r3, r3, #9
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e4c:	bf00      	nop
  }
  while (Delay --);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e5a      	subs	r2, r3, #1
 8002e52:	60fa      	str	r2, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f9      	bne.n	8002e4c <RCC_Delay+0x1c>
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	20000004 	.word	0x20000004
 8002e68:	10624dd3 	.word	0x10624dd3

08002e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e041      	b.n	8002f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe feb8 	bl	8001c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 fe30 	bl	8003b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e041      	b.n	8002fa0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fe fe4b 	bl	8001bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3304      	adds	r3, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f000 fde1 	bl	8003b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_TIM_PWM_Start+0x24>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e022      	b.n	8003012 <HAL_TIM_PWM_Start+0x6a>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d109      	bne.n	8002fe6 <HAL_TIM_PWM_Start+0x3e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	bf14      	ite	ne
 8002fde:	2301      	movne	r3, #1
 8002fe0:	2300      	moveq	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	e015      	b.n	8003012 <HAL_TIM_PWM_Start+0x6a>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d109      	bne.n	8003000 <HAL_TIM_PWM_Start+0x58>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e008      	b.n	8003012 <HAL_TIM_PWM_Start+0x6a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	bf14      	ite	ne
 800300c:	2301      	movne	r3, #1
 800300e:	2300      	moveq	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e05e      	b.n	80030d8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d104      	bne.n	800302a <HAL_TIM_PWM_Start+0x82>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003028:	e013      	b.n	8003052 <HAL_TIM_PWM_Start+0xaa>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d104      	bne.n	800303a <HAL_TIM_PWM_Start+0x92>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003038:	e00b      	b.n	8003052 <HAL_TIM_PWM_Start+0xaa>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d104      	bne.n	800304a <HAL_TIM_PWM_Start+0xa2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003048:	e003      	b.n	8003052 <HAL_TIM_PWM_Start+0xaa>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2201      	movs	r2, #1
 8003058:	6839      	ldr	r1, [r7, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f001 f8e5 	bl	800422a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_TIM_PWM_Start+0x138>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d107      	bne.n	800307a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <HAL_TIM_PWM_Start+0x138>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00e      	beq.n	80030a2 <HAL_TIM_PWM_Start+0xfa>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d009      	beq.n	80030a2 <HAL_TIM_PWM_Start+0xfa>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_TIM_PWM_Start+0x13c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_TIM_PWM_Start+0xfa>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <HAL_TIM_PWM_Start+0x140>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d111      	bne.n	80030c6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b06      	cmp	r3, #6
 80030b2:	d010      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c4:	e007      	b.n	80030d6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800

080030ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 f893 	bl	800422a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <HAL_TIM_PWM_Stop+0xc4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d117      	bne.n	800313e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	f241 1311 	movw	r3, #4369	; 0x1111
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_TIM_PWM_Stop+0x52>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	f240 4344 	movw	r3, #1092	; 0x444
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <HAL_TIM_PWM_Stop+0x52>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	f241 1311 	movw	r3, #4369	; 0x1111
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <HAL_TIM_PWM_Stop+0x82>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	f240 4344 	movw	r3, #1092	; 0x444
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d107      	bne.n	800316e <HAL_TIM_PWM_Stop+0x82>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0201 	bic.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Stop+0x92>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800317c:	e013      	b.n	80031a6 <HAL_TIM_PWM_Stop+0xba>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b04      	cmp	r3, #4
 8003182:	d104      	bne.n	800318e <HAL_TIM_PWM_Stop+0xa2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800318c:	e00b      	b.n	80031a6 <HAL_TIM_PWM_Stop+0xba>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d104      	bne.n	800319e <HAL_TIM_PWM_Stop+0xb2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800319c:	e003      	b.n	80031a6 <HAL_TIM_PWM_Stop+0xba>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40012c00 	.word	0x40012c00

080031b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e041      	b.n	800324a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe fcae 	bl	8001b3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f000 fc8c 	bl	8003b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <HAL_TIM_IC_Start_IT+0x1e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e013      	b.n	800329a <HAL_TIM_IC_Start_IT+0x46>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d104      	bne.n	8003282 <HAL_TIM_IC_Start_IT+0x2e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e00b      	b.n	800329a <HAL_TIM_IC_Start_IT+0x46>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d104      	bne.n	8003292 <HAL_TIM_IC_Start_IT+0x3e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e003      	b.n	800329a <HAL_TIM_IC_Start_IT+0x46>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003298:	b2db      	uxtb	r3, r3
 800329a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <HAL_TIM_IC_Start_IT+0x58>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e013      	b.n	80032d4 <HAL_TIM_IC_Start_IT+0x80>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d104      	bne.n	80032bc <HAL_TIM_IC_Start_IT+0x68>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e00b      	b.n	80032d4 <HAL_TIM_IC_Start_IT+0x80>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d104      	bne.n	80032cc <HAL_TIM_IC_Start_IT+0x78>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e003      	b.n	80032d4 <HAL_TIM_IC_Start_IT+0x80>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032d6:	7bbb      	ldrb	r3, [r7, #14]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d102      	bne.n	80032e2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032dc:	7b7b      	ldrb	r3, [r7, #13]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d001      	beq.n	80032e6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0b8      	b.n	8003458 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_IC_Start_IT+0xa2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f4:	e013      	b.n	800331e <HAL_TIM_IC_Start_IT+0xca>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_IC_Start_IT+0xb2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003304:	e00b      	b.n	800331e <HAL_TIM_IC_Start_IT+0xca>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d104      	bne.n	8003316 <HAL_TIM_IC_Start_IT+0xc2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003314:	e003      	b.n	800331e <HAL_TIM_IC_Start_IT+0xca>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_TIM_IC_Start_IT+0xda>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800332c:	e013      	b.n	8003356 <HAL_TIM_IC_Start_IT+0x102>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d104      	bne.n	800333e <HAL_TIM_IC_Start_IT+0xea>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800333c:	e00b      	b.n	8003356 <HAL_TIM_IC_Start_IT+0x102>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d104      	bne.n	800334e <HAL_TIM_IC_Start_IT+0xfa>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800334c:	e003      	b.n	8003356 <HAL_TIM_IC_Start_IT+0x102>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d841      	bhi.n	80033e0 <HAL_TIM_IC_Start_IT+0x18c>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <HAL_TIM_IC_Start_IT+0x110>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003399 	.word	0x08003399
 8003368:	080033e1 	.word	0x080033e1
 800336c:	080033e1 	.word	0x080033e1
 8003370:	080033e1 	.word	0x080033e1
 8003374:	080033ab 	.word	0x080033ab
 8003378:	080033e1 	.word	0x080033e1
 800337c:	080033e1 	.word	0x080033e1
 8003380:	080033e1 	.word	0x080033e1
 8003384:	080033bd 	.word	0x080033bd
 8003388:	080033e1 	.word	0x080033e1
 800338c:	080033e1 	.word	0x080033e1
 8003390:	080033e1 	.word	0x080033e1
 8003394:	080033cf 	.word	0x080033cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0202 	orr.w	r2, r2, #2
 80033a6:	60da      	str	r2, [r3, #12]
      break;
 80033a8:	e01d      	b.n	80033e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0204 	orr.w	r2, r2, #4
 80033b8:	60da      	str	r2, [r3, #12]
      break;
 80033ba:	e014      	b.n	80033e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0208 	orr.w	r2, r2, #8
 80033ca:	60da      	str	r2, [r3, #12]
      break;
 80033cc:	e00b      	b.n	80033e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0210 	orr.w	r2, r2, #16
 80033dc:	60da      	str	r2, [r3, #12]
      break;
 80033de:	e002      	b.n	80033e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      break;
 80033e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d134      	bne.n	8003456 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	6839      	ldr	r1, [r7, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 ff18 	bl	800422a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_TIM_IC_Start_IT+0x20c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_TIM_IC_Start_IT+0x1ce>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340c:	d009      	beq.n	8003422 <HAL_TIM_IC_Start_IT+0x1ce>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a14      	ldr	r2, [pc, #80]	; (8003464 <HAL_TIM_IC_Start_IT+0x210>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_TIM_IC_Start_IT+0x1ce>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a12      	ldr	r2, [pc, #72]	; (8003468 <HAL_TIM_IC_Start_IT+0x214>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d111      	bne.n	8003446 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b06      	cmp	r3, #6
 8003432:	d010      	beq.n	8003456 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003444:	e007      	b.n	8003456 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003456:	7bfb      	ldrb	r3, [r7, #15]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800

0800346c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d122      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d11b      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0202 	mvn.w	r2, #2
 8003498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fd68 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fb0e 	bl	8003ad8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fb14 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d122      	bne.n	800351c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d11b      	bne.n	800351c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0204 	mvn.w	r2, #4
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd fd3e 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fae4 	bl	8003ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 faea 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b08      	cmp	r3, #8
 8003528:	d122      	bne.n	8003570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b08      	cmp	r3, #8
 8003536:	d11b      	bne.n	8003570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0208 	mvn.w	r2, #8
 8003540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2204      	movs	r2, #4
 8003546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd fd14 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 faba 	bl	8003ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fac0 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b10      	cmp	r3, #16
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b10      	cmp	r3, #16
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0210 	mvn.w	r2, #16
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2208      	movs	r2, #8
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd fcea 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa90 	bl	8003ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fa96 	bl	8003aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d10e      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0201 	mvn.w	r2, #1
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa6b 	bl	8003ac6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d107      	bne.n	800361c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fe93 	bl	8004342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fa5a 	bl	8003afc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0220 	mvn.w	r2, #32
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fe5e 	bl	8004330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003696:	2302      	movs	r3, #2
 8003698:	e088      	b.n	80037ac <HAL_TIM_IC_ConfigChannel+0x130>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d11b      	bne.n	80036e0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f000 fc14 	bl	8003ee4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 020c 	bic.w	r2, r2, #12
 80036ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6999      	ldr	r1, [r3, #24]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	619a      	str	r2, [r3, #24]
 80036de:	e060      	b.n	80037a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d11c      	bne.n	8003720 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f000 fc7d 	bl	8003ff4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003708:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6999      	ldr	r1, [r3, #24]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	021a      	lsls	r2, r3, #8
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	619a      	str	r2, [r3, #24]
 800371e:	e040      	b.n	80037a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b08      	cmp	r3, #8
 8003724:	d11b      	bne.n	800375e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f000 fcc8 	bl	80040ca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 020c 	bic.w	r2, r2, #12
 8003748:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69d9      	ldr	r1, [r3, #28]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	61da      	str	r2, [r3, #28]
 800375c:	e021      	b.n	80037a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d11c      	bne.n	800379e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f000 fce4 	bl	8004140 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003786:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69d9      	ldr	r1, [r3, #28]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	61da      	str	r2, [r3, #28]
 800379c:	e001      	b.n	80037a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e0ae      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	f200 809f 	bhi.w	8003920 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	08003921 	.word	0x08003921
 80037f0:	08003921 	.word	0x08003921
 80037f4:	08003921 	.word	0x08003921
 80037f8:	0800385d 	.word	0x0800385d
 80037fc:	08003921 	.word	0x08003921
 8003800:	08003921 	.word	0x08003921
 8003804:	08003921 	.word	0x08003921
 8003808:	0800389f 	.word	0x0800389f
 800380c:	08003921 	.word	0x08003921
 8003810:	08003921 	.word	0x08003921
 8003814:	08003921 	.word	0x08003921
 8003818:	080038df 	.word	0x080038df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f9d6 	bl	8003bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0208 	orr.w	r2, r2, #8
 8003836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6999      	ldr	r1, [r3, #24]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	619a      	str	r2, [r3, #24]
      break;
 800385a:	e064      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fa1c 	bl	8003ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6999      	ldr	r1, [r3, #24]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	619a      	str	r2, [r3, #24]
      break;
 800389c:	e043      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fa65 	bl	8003d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0208 	orr.w	r2, r2, #8
 80038b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0204 	bic.w	r2, r2, #4
 80038c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	61da      	str	r2, [r3, #28]
      break;
 80038dc:	e023      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 faaf 	bl	8003e48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69d9      	ldr	r1, [r3, #28]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	021a      	lsls	r2, r3, #8
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	61da      	str	r2, [r3, #28]
      break;
 800391e:	e002      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	75fb      	strb	r3, [r7, #23]
      break;
 8003924:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800392e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_TIM_ConfigClockSource+0x1c>
 8003950:	2302      	movs	r3, #2
 8003952:	e0b4      	b.n	8003abe <HAL_TIM_ConfigClockSource+0x186>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398c:	d03e      	beq.n	8003a0c <HAL_TIM_ConfigClockSource+0xd4>
 800398e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003992:	f200 8087 	bhi.w	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399a:	f000 8086 	beq.w	8003aaa <HAL_TIM_ConfigClockSource+0x172>
 800399e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a2:	d87f      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039a4:	2b70      	cmp	r3, #112	; 0x70
 80039a6:	d01a      	beq.n	80039de <HAL_TIM_ConfigClockSource+0xa6>
 80039a8:	2b70      	cmp	r3, #112	; 0x70
 80039aa:	d87b      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ac:	2b60      	cmp	r3, #96	; 0x60
 80039ae:	d050      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x11a>
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d877      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039b4:	2b50      	cmp	r3, #80	; 0x50
 80039b6:	d03c      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0xfa>
 80039b8:	2b50      	cmp	r3, #80	; 0x50
 80039ba:	d873      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d058      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x13a>
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d86f      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b30      	cmp	r3, #48	; 0x30
 80039c6:	d064      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039c8:	2b30      	cmp	r3, #48	; 0x30
 80039ca:	d86b      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d060      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d867      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d05c      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d05a      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039dc:	e062      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6899      	ldr	r1, [r3, #8]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f000 fbfd 	bl	80041ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	609a      	str	r2, [r3, #8]
      break;
 8003a0a:	e04f      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6899      	ldr	r1, [r3, #8]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f000 fbe6 	bl	80041ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a2e:	609a      	str	r2, [r3, #8]
      break;
 8003a30:	e03c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 faaa 	bl	8003f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2150      	movs	r1, #80	; 0x50
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fbb4 	bl	80041b8 <TIM_ITRx_SetConfig>
      break;
 8003a50:	e02c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f000 fb04 	bl	800406c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2160      	movs	r1, #96	; 0x60
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fba4 	bl	80041b8 <TIM_ITRx_SetConfig>
      break;
 8003a70:	e01c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 fa8a 	bl	8003f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2140      	movs	r1, #64	; 0x40
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fb94 	bl	80041b8 <TIM_ITRx_SetConfig>
      break;
 8003a90:	e00c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f000 fb8b 	bl	80041b8 <TIM_ITRx_SetConfig>
      break;
 8003aa2:	e003      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa8:	e000      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
	...

08003b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <TIM_Base_SetConfig+0xb8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00b      	beq.n	8003b40 <TIM_Base_SetConfig+0x30>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2e:	d007      	beq.n	8003b40 <TIM_Base_SetConfig+0x30>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <TIM_Base_SetConfig+0xbc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_Base_SetConfig+0x30>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a25      	ldr	r2, [pc, #148]	; (8003bd0 <TIM_Base_SetConfig+0xc0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d108      	bne.n	8003b52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <TIM_Base_SetConfig+0xb8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <TIM_Base_SetConfig+0x62>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b60:	d007      	beq.n	8003b72 <TIM_Base_SetConfig+0x62>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <TIM_Base_SetConfig+0xbc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_Base_SetConfig+0x62>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <TIM_Base_SetConfig+0xc0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d108      	bne.n	8003b84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <TIM_Base_SetConfig+0xb8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d103      	bne.n	8003bb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	615a      	str	r2, [r3, #20]
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800

08003bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f023 0201 	bic.w	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0303 	bic.w	r3, r3, #3
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 0302 	bic.w	r3, r3, #2
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <TIM_OC1_SetConfig+0xc8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10c      	bne.n	8003c4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0308 	bic.w	r3, r3, #8
 8003c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <TIM_OC1_SetConfig+0xc8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d111      	bne.n	8003c76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	621a      	str	r2, [r3, #32]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40012c00 	.word	0x40012c00

08003ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f023 0210 	bic.w	r2, r3, #16
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f023 0320 	bic.w	r3, r3, #32
 8003cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <TIM_OC2_SetConfig+0xd0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10d      	bne.n	8003d1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a14      	ldr	r2, [pc, #80]	; (8003d70 <TIM_OC2_SetConfig+0xd0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d113      	bne.n	8003d4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr
 8003d70:	40012c00 	.word	0x40012c00

08003d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <TIM_OC3_SetConfig+0xd0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10d      	bne.n	8003dee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <TIM_OC3_SetConfig+0xd0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d113      	bne.n	8003e1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00

08003e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	031b      	lsls	r3, r3, #12
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a0f      	ldr	r2, [pc, #60]	; (8003ee0 <TIM_OC4_SetConfig+0x98>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d109      	bne.n	8003ebc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00

08003ee4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f023 0201 	bic.w	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <TIM_TI1_SetConfig+0xa8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <TIM_TI1_SetConfig+0x46>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f18:	d007      	beq.n	8003f2a <TIM_TI1_SetConfig+0x46>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <TIM_TI1_SetConfig+0xac>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_TI1_SetConfig+0x46>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a1b      	ldr	r2, [pc, #108]	; (8003f94 <TIM_TI1_SetConfig+0xb0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <TIM_TI1_SetConfig+0x4a>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <TIM_TI1_SetConfig+0x4c>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f023 0303 	bic.w	r3, r3, #3
 8003f3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	e003      	b.n	8003f4e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f023 030a 	bic.w	r3, r3, #10
 8003f68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 030a 	and.w	r3, r3, #10
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800

08003f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f023 0201 	bic.w	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 030a 	bic.w	r3, r3, #10
 8003fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f023 0210 	bic.w	r2, r3, #16
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004020:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	031b      	lsls	r3, r3, #12
 8004038:	b29b      	uxth	r3, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004046:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0210 	bic.w	r2, r3, #16
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	031b      	lsls	r3, r3, #12
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004106:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	b2db      	uxtb	r3, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800411a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800417e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	031b      	lsls	r3, r3, #12
 8004184:	b29b      	uxth	r3, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004192:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	031b      	lsls	r3, r3, #12
 8004198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f043 0307 	orr.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	609a      	str	r2, [r3, #8]
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	431a      	orrs	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800422a:	b480      	push	{r7}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	2201      	movs	r2, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	43db      	mvns	r3, r3
 800424c:	401a      	ands	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	431a      	orrs	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]
}
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
	...

08004274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004288:	2302      	movs	r3, #2
 800428a:	e046      	b.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d8:	d009      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a10      	ldr	r2, [pc, #64]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10c      	bne.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800

08004330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e042      	b.n	80043ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fd fcb6 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2224      	movs	r2, #36	; 0x24
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fe57 	bl	800504c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b20      	cmp	r3, #32
 8004412:	d16d      	bne.n	80044f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_UART_Transmit+0x2c>
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e066      	b.n	80044f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2221      	movs	r2, #33	; 0x21
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004432:	f7fd fda5 	bl	8001f80 <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	88fa      	ldrh	r2, [r7, #6]
 8004442:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	d108      	bne.n	8004460 <HAL_UART_Transmit+0x6c>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e003      	b.n	8004468 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004468:	e02a      	b.n	80044c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2200      	movs	r2, #0
 8004472:	2180      	movs	r1, #128	; 0x80
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fba6 	bl	8004bc6 <UART_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e036      	b.n	80044f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004498:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	3302      	adds	r3, #2
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	e007      	b.n	80044b2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1cf      	bne.n	800446a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2140      	movs	r1, #64	; 0x40
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fb76 	bl	8004bc6 <UART_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e006      	b.n	80044f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b08a      	sub	sp, #40	; 0x28
 80044fe:	af02      	add	r7, sp, #8
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	4613      	mov	r3, r2
 8004508:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b20      	cmp	r3, #32
 8004518:	d17c      	bne.n	8004614 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_UART_Receive+0x2c>
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e075      	b.n	8004616 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2222      	movs	r2, #34	; 0x22
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800453e:	f7fd fd1f 	bl	8001f80 <HAL_GetTick>
 8004542:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	88fa      	ldrh	r2, [r7, #6]
 800454e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004558:	d108      	bne.n	800456c <HAL_UART_Receive+0x72>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	e003      	b.n	8004574 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004574:	e043      	b.n	80045fe <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2200      	movs	r2, #0
 800457e:	2120      	movs	r1, #32
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 fb20 	bl	8004bc6 <UART_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e042      	b.n	8004616 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10c      	bne.n	80045b0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	b29b      	uxth	r3, r3
 800459e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	3302      	adds	r3, #2
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	e01f      	b.n	80045f0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b8:	d007      	beq.n	80045ca <HAL_UART_Receive+0xd0>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <HAL_UART_Receive+0xde>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e008      	b.n	80045ea <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3301      	adds	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1b6      	bne.n	8004576 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	4613      	mov	r3, r2
 800462a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b20      	cmp	r3, #32
 8004636:	d112      	bne.n	800465e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_UART_Receive_IT+0x26>
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e00b      	b.n	8004660 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	461a      	mov	r2, r3
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fb24 	bl	8004ca2 <UART_Start_Receive_IT>
 800465a:	4603      	mov	r3, r0
 800465c:	e000      	b.n	8004660 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
  }
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b0ba      	sub	sp, #232	; 0xe8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_UART_IRQHandler+0x66>
 80046ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fc01 	bl	8004ece <UART_Receive_IT>
      return;
 80046cc:	e25b      	b.n	8004b86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80de 	beq.w	8004894 <HAL_UART_IRQHandler+0x22c>
 80046d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80d1 	beq.w	8004894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <HAL_UART_IRQHandler+0xae>
 80046fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f043 0201 	orr.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_UART_IRQHandler+0xd2>
 8004722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f043 0202 	orr.w	r2, r3, #2
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_UART_IRQHandler+0xf6>
 8004746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_UART_IRQHandler+0x126>
 800476a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 81f2 	beq.w	8004b7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_UART_IRQHandler+0x14e>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fb8c 	bl	8004ece <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_UART_IRQHandler+0x17a>
 80047da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04f      	beq.n	8004882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa96 	bl	8004d14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d041      	beq.n	800487a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800480c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800482e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800483a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1d9      	bne.n	80047f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d013      	beq.n	8004872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	4a7e      	ldr	r2, [pc, #504]	; (8004a48 <HAL_UART_IRQHandler+0x3e0>)
 8004850:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd fce4 	bl	8002224 <HAL_DMA_Abort_IT>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800486c:	4610      	mov	r0, r2
 800486e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	e00e      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f993 	bl	8004b9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e00a      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f98f 	bl	8004b9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e006      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f98b 	bl	8004b9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800488e:	e175      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	bf00      	nop
    return;
 8004892:	e173      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	f040 814f 	bne.w	8004b3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8148 	beq.w	8004b3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8141 	beq.w	8004b3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80b6 	beq.w	8004a4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8145 	beq.w	8004b80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048fe:	429a      	cmp	r2, r3
 8004900:	f080 813e 	bcs.w	8004b80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800490a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b20      	cmp	r3, #32
 8004914:	f000 8088 	beq.w	8004a28 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	330c      	adds	r3, #12
 800491e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800492e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004944:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004950:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800495c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1d9      	bne.n	8004918 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3314      	adds	r3, #20
 800496a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3314      	adds	r3, #20
 8004984:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004988:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800498c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004990:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800499a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e1      	bne.n	8004964 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3314      	adds	r3, #20
 80049a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e3      	bne.n	80049a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	330c      	adds	r3, #12
 80049ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f8:	f023 0310 	bic.w	r3, r3, #16
 80049fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a0c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e3      	bne.n	80049e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fd fbc3 	bl	80021ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f8b6 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a44:	e09c      	b.n	8004b80 <HAL_UART_IRQHandler+0x518>
 8004a46:	bf00      	nop
 8004a48:	08004dd9 	.word	0x08004dd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 808e 	beq.w	8004b84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8089 	beq.w	8004b84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a96:	647a      	str	r2, [r7, #68]	; 0x44
 8004a98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e3      	bne.n	8004a72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3314      	adds	r3, #20
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3314      	adds	r3, #20
 8004aca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ace:	633a      	str	r2, [r7, #48]	; 0x30
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e3      	bne.n	8004aaa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0310 	bic.w	r3, r3, #16
 8004b06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b14:	61fa      	str	r2, [r7, #28]
 8004b16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	69b9      	ldr	r1, [r7, #24]
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	617b      	str	r3, [r7, #20]
   return(result);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e3      	bne.n	8004af0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f83b 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b3a:	e023      	b.n	8004b84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d009      	beq.n	8004b5c <HAL_UART_IRQHandler+0x4f4>
 8004b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f953 	bl	8004e00 <UART_Transmit_IT>
    return;
 8004b5a:	e014      	b.n	8004b86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00e      	beq.n	8004b86 <HAL_UART_IRQHandler+0x51e>
 8004b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f992 	bl	8004e9e <UART_EndTransmit_IT>
    return;
 8004b7a:	e004      	b.n	8004b86 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b7c:	bf00      	nop
 8004b7e:	e002      	b.n	8004b86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b80:	bf00      	nop
 8004b82:	e000      	b.n	8004b86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b84:	bf00      	nop
  }
}
 8004b86:	37e8      	adds	r7, #232	; 0xe8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr

08004b9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr

08004bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b090      	sub	sp, #64	; 0x40
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd6:	e050      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d04c      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004be6:	f7fd f9cb 	bl	8001f80 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d241      	bcs.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c16:	637a      	str	r2, [r7, #52]	; 0x34
 8004c18:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e5      	bne.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c4a:	623a      	str	r2, [r7, #32]
 8004c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	69f9      	ldr	r1, [r7, #28]
 8004c50:	6a3a      	ldr	r2, [r7, #32]
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e5      	bne.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e00f      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	bf0c      	ite	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d09f      	beq.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3740      	adds	r7, #64	; 0x40
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	4613      	mov	r3, r2
 8004cae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	88fa      	ldrh	r2, [r7, #6]
 8004cba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2222      	movs	r2, #34	; 0x22
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0220 	orr.w	r2, r2, #32
 8004d06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b095      	sub	sp, #84	; 0x54
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d3c:	643a      	str	r2, [r7, #64]	; 0x40
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e5      	bne.n	8004d1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3314      	adds	r3, #20
 8004d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d119      	bne.n	8004dc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f023 0310 	bic.w	r3, r3, #16
 8004da2:	647b      	str	r3, [r7, #68]	; 0x44
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dac:	61ba      	str	r2, [r7, #24]
 8004dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dce:	bf00      	nop
 8004dd0:	3754      	adds	r7, #84	; 0x54
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7ff fed3 	bl	8004b9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b21      	cmp	r3, #33	; 0x21
 8004e12:	d13e      	bne.n	8004e92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1c:	d114      	bne.n	8004e48 <UART_Transmit_IT+0x48>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d110      	bne.n	8004e48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	1c9a      	adds	r2, r3, #2
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	621a      	str	r2, [r3, #32]
 8004e46:	e008      	b.n	8004e5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	1c59      	adds	r1, r3, #1
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6211      	str	r1, [r2, #32]
 8004e52:	781a      	ldrb	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4619      	mov	r1, r3
 8004e68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e000      	b.n	8004e94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
  }
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fe64 	bl	8004b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b08c      	sub	sp, #48	; 0x30
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b22      	cmp	r3, #34	; 0x22
 8004ee0:	f040 80ae 	bne.w	8005040 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eec:	d117      	bne.n	8004f1e <UART_Receive_IT+0x50>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d113      	bne.n	8004f1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f1c:	e026      	b.n	8004f6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f24:	2300      	movs	r3, #0
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f30:	d007      	beq.n	8004f42 <UART_Receive_IT+0x74>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <UART_Receive_IT+0x82>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	e008      	b.n	8004f62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d15d      	bne.n	800503c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0220 	bic.w	r2, r2, #32
 8004f8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695a      	ldr	r2, [r3, #20]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d135      	bne.n	8005032 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	613b      	str	r3, [r7, #16]
   return(result);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f023 0310 	bic.w	r3, r3, #16
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	623a      	str	r2, [r7, #32]
 8004fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	69f9      	ldr	r1, [r7, #28]
 8004ff2:	6a3a      	ldr	r2, [r7, #32]
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e5      	bne.n	8004fcc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b10      	cmp	r3, #16
 800500c:	d10a      	bne.n	8005024 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff fdc0 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
 8005030:	e002      	b.n	8005038 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fb fdb8 	bl	8000ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	e002      	b.n	8005042 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3730      	adds	r7, #48	; 0x30
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005086:	f023 030c 	bic.w	r3, r3, #12
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	430b      	orrs	r3, r1
 8005092:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a2c      	ldr	r2, [pc, #176]	; (8005160 <UART_SetConfig+0x114>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d103      	bne.n	80050bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050b4:	f7fd fea8 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	e002      	b.n	80050c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050bc:	f7fd fe90 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 80050c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009a      	lsls	r2, r3, #2
 80050cc:	441a      	add	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	4a22      	ldr	r2, [pc, #136]	; (8005164 <UART_SetConfig+0x118>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	0119      	lsls	r1, r3, #4
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009a      	lsls	r2, r3, #2
 80050ec:	441a      	add	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050f8:	4b1a      	ldr	r3, [pc, #104]	; (8005164 <UART_SetConfig+0x118>)
 80050fa:	fba3 0302 	umull	r0, r3, r3, r2
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	2064      	movs	r0, #100	; 0x64
 8005102:	fb00 f303 	mul.w	r3, r0, r3
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	3332      	adds	r3, #50	; 0x32
 800510c:	4a15      	ldr	r2, [pc, #84]	; (8005164 <UART_SetConfig+0x118>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005118:	4419      	add	r1, r3
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009a      	lsls	r2, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <UART_SetConfig+0x118>)
 8005132:	fba3 0302 	umull	r0, r3, r3, r2
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	2064      	movs	r0, #100	; 0x64
 800513a:	fb00 f303 	mul.w	r3, r0, r3
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	3332      	adds	r3, #50	; 0x32
 8005144:	4a07      	ldr	r2, [pc, #28]	; (8005164 <UART_SetConfig+0x118>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	f003 020f 	and.w	r2, r3, #15
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	440a      	add	r2, r1
 8005156:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40013800 	.word	0x40013800
 8005164:	51eb851f 	.word	0x51eb851f

08005168 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800516e:	201c      	movs	r0, #28
 8005170:	f001 fa0e 	bl	8006590 <pvPortMalloc>
 8005174:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	4618      	mov	r0, r3
 8005188:	f000 f982 	bl	8005490 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005192:	687b      	ldr	r3, [r7, #4]
	}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b090      	sub	sp, #64	; 0x40
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <xEventGroupWaitBits+0x56>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	61fb      	str	r3, [r7, #28]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <xEventGroupWaitBits+0x72>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	61bb      	str	r3, [r7, #24]
}
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800520e:	f000 ff73 	bl	80060f8 <xTaskGetSchedulerState>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <xEventGroupWaitBits+0x82>
 8005218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <xEventGroupWaitBits+0x86>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <xEventGroupWaitBits+0x88>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	617b      	str	r3, [r7, #20]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800523e:	f000 fc15 	bl	8005a6c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800524e:	f000 f8fe 	bl	800544e <prvTestWaitCondition>
 8005252:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00e      	beq.n	8005278 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800525e:	2300      	movs	r3, #0
 8005260:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d028      	beq.n	80052ba <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	43db      	mvns	r3, r3
 8005270:	401a      	ands	r2, r3
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e020      	b.n	80052ba <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005282:	2301      	movs	r3, #1
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
 8005286:	e018      	b.n	80052ba <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005294:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052a2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80052a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a6:	1d18      	adds	r0, r3, #4
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	4313      	orrs	r3, r2
 80052ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b0:	4619      	mov	r1, r3
 80052b2:	f000 fda5 	bl	8005e00 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80052ba:	f000 fbe5 	bl	8005a88 <xTaskResumeAll>
 80052be:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80052c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d031      	beq.n	800532a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d107      	bne.n	80052dc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80052cc:	4b19      	ldr	r3, [pc, #100]	; (8005334 <xEventGroupWaitBits+0x198>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80052dc:	f000 ff2a 	bl	8006134 <uxTaskResetEventItemValue>
 80052e0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80052e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d11a      	bne.n	8005322 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80052ec:	f001 f88e 	bl	800640c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80052fc:	f000 f8a7 	bl	800544e <prvTestWaitCondition>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d006      	beq.n	800531a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	43db      	mvns	r3, r3
 8005314:	401a      	ands	r2, r3
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800531a:	2301      	movs	r3, #1
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800531e:	f001 f8a5 	bl	800646c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005324:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800532c:	4618      	mov	r0, r3
 800532e:	3740      	adds	r7, #64	; 0x40
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	e000ed04 	.word	0xe000ed04

08005338 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08e      	sub	sp, #56	; 0x38
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005342:	2300      	movs	r3, #0
 8005344:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800534a:	2300      	movs	r3, #0
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xEventGroupSetBits+0x32>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	613b      	str	r3, [r7, #16]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <xEventGroupSetBits+0x52>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60fb      	str	r3, [r7, #12]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	3304      	adds	r3, #4
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	3308      	adds	r3, #8
 8005394:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005396:	f000 fb69 	bl	8005a6c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80053ac:	e03c      	b.n	8005428 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80053ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80053b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053c4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053cc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e8:	e008      	b.n	80053fc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	4013      	ands	r3, r2
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d101      	bne.n	80053fc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80053f8:	2301      	movs	r3, #1
 80053fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800540c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	4313      	orrs	r3, r2
 8005412:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800541c:	4619      	mov	r1, r3
 800541e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005420:	f000 fd2a 	bl	8005e78 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	429a      	cmp	r2, r3
 800542e:	d1be      	bne.n	80053ae <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	43db      	mvns	r3, r3
 8005438:	401a      	ands	r2, r3
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800543e:	f000 fb23 	bl	8005a88 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	681b      	ldr	r3, [r3, #0]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3738      	adds	r7, #56	; 0x38
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800544e:	b480      	push	{r7}
 8005450:	b087      	sub	sp, #28
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d107      	bne.n	8005474 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e007      	b.n	8005484 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4013      	ands	r3, r2
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	d101      	bne.n	8005484 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005484:	697b      	ldr	r3, [r7, #20]
}
 8005486:	4618      	mov	r0, r3
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr

08005490 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f103 0208 	add.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295
 80054a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f103 0208 	add.w	r2, r3, #8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f103 0208 	add.w	r2, r3, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	601a      	str	r2, [r3, #0]
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	d103      	bne.n	800554c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e00c      	b.n	8005566 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3308      	adds	r3, #8
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e002      	b.n	800555a <vListInsert+0x2e>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	d2f6      	bcs.n	8005554 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6892      	ldr	r2, [r2, #8]
 80055b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6852      	ldr	r2, [r2, #4]
 80055bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d103      	bne.n	80055d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	1e5a      	subs	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr

080055ee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b08e      	sub	sp, #56	; 0x38
 80055f2:	af04      	add	r7, sp, #16
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	623b      	str	r3, [r7, #32]
}
 8005614:	bf00      	nop
 8005616:	e7fe      	b.n	8005616 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <xTaskCreateStatic+0x46>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	61fb      	str	r3, [r7, #28]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005634:	23b4      	movs	r3, #180	; 0xb4
 8005636:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2bb4      	cmp	r3, #180	; 0xb4
 800563c:	d00a      	beq.n	8005654 <xTaskCreateStatic+0x66>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	61bb      	str	r3, [r7, #24]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01e      	beq.n	8005698 <xTaskCreateStatic+0xaa>
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01b      	beq.n	8005698 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005668:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	2202      	movs	r2, #2
 800566e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005672:	2300      	movs	r3, #0
 8005674:	9303      	str	r3, [sp, #12]
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	9302      	str	r3, [sp, #8]
 800567a:	f107 0314 	add.w	r3, r7, #20
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f850 	bl	8005730 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005692:	f000 f8e3 	bl	800585c <prvAddNewTaskToReadyList>
 8005696:	e001      	b.n	800569c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800569c:	697b      	ldr	r3, [r7, #20]
	}
 800569e:	4618      	mov	r0, r3
 80056a0:	3728      	adds	r7, #40	; 0x28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b08c      	sub	sp, #48	; 0x30
 80056aa:	af04      	add	r7, sp, #16
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 ff68 	bl	8006590 <pvPortMalloc>
 80056c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00e      	beq.n	80056e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80056c8:	20b4      	movs	r0, #180	; 0xb4
 80056ca:	f000 ff61 	bl	8006590 <pvPortMalloc>
 80056ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
 80056dc:	e005      	b.n	80056ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056de:	6978      	ldr	r0, [r7, #20]
 80056e0:	f001 f81a 	bl	8006718 <vPortFree>
 80056e4:	e001      	b.n	80056ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d017      	beq.n	8005720 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056f8:	88fa      	ldrh	r2, [r7, #6]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9303      	str	r3, [sp, #12]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	9302      	str	r3, [sp, #8]
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	9301      	str	r3, [sp, #4]
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f80e 	bl	8005730 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005714:	69f8      	ldr	r0, [r7, #28]
 8005716:	f000 f8a1 	bl	800585c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800571a:	2301      	movs	r3, #1
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e002      	b.n	8005726 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295
 8005724:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005726:	69bb      	ldr	r3, [r7, #24]
	}
 8005728:	4618      	mov	r0, r3
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005748:	3b01      	subs	r3, #1
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f023 0307 	bic.w	r3, r3, #7
 8005756:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	617b      	str	r3, [r7, #20]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005778:	2300      	movs	r3, #0
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	e012      	b.n	80057a4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	7819      	ldrb	r1, [r3, #0]
 8005786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	4413      	add	r3, r2
 800578c:	3334      	adds	r3, #52	; 0x34
 800578e:	460a      	mov	r2, r1
 8005790:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d006      	beq.n	80057ac <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3301      	adds	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	d9e9      	bls.n	800577e <prvInitialiseNewTask+0x4e>
 80057aa:	e000      	b.n	80057ae <prvInitialiseNewTask+0x7e>
		{
			break;
 80057ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	2b06      	cmp	r3, #6
 80057ba:	d901      	bls.n	80057c0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057bc:	2306      	movs	r3, #6
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	2200      	movs	r2, #0
 80057d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	3304      	adds	r3, #4
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff fe79 	bl	80054ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	3318      	adds	r3, #24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fe74 	bl	80054ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	f1c3 0207 	rsb	r2, r3, #7
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	2200      	movs	r2, #0
 8005808:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	334c      	adds	r3, #76	; 0x4c
 8005810:	2260      	movs	r2, #96	; 0x60
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f001 f8b9 	bl	800698c <memset>
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <prvInitialiseNewTask+0x120>)
 800581e:	651a      	str	r2, [r3, #80]	; 0x50
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	4a0c      	ldr	r2, [pc, #48]	; (8005854 <prvInitialiseNewTask+0x124>)
 8005824:	655a      	str	r2, [r3, #84]	; 0x54
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	4a0b      	ldr	r2, [pc, #44]	; (8005858 <prvInitialiseNewTask+0x128>)
 800582a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	69b8      	ldr	r0, [r7, #24]
 8005832:	f000 fcfd 	bl	8006230 <pxPortInitialiseStack>
 8005836:	4602      	mov	r2, r0
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005846:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005848:	bf00      	nop
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	08006ba8 	.word	0x08006ba8
 8005854:	08006bc8 	.word	0x08006bc8
 8005858:	08006b88 	.word	0x08006b88

0800585c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005864:	f000 fdd2 	bl	800640c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005868:	4b2a      	ldr	r3, [pc, #168]	; (8005914 <prvAddNewTaskToReadyList+0xb8>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	4a29      	ldr	r2, [pc, #164]	; (8005914 <prvAddNewTaskToReadyList+0xb8>)
 8005870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005872:	4b29      	ldr	r3, [pc, #164]	; (8005918 <prvAddNewTaskToReadyList+0xbc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800587a:	4a27      	ldr	r2, [pc, #156]	; (8005918 <prvAddNewTaskToReadyList+0xbc>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005880:	4b24      	ldr	r3, [pc, #144]	; (8005914 <prvAddNewTaskToReadyList+0xb8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d110      	bne.n	80058aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005888:	f000 fb70 	bl	8005f6c <prvInitialiseTaskLists>
 800588c:	e00d      	b.n	80058aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800588e:	4b23      	ldr	r3, [pc, #140]	; (800591c <prvAddNewTaskToReadyList+0xc0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005896:	4b20      	ldr	r3, [pc, #128]	; (8005918 <prvAddNewTaskToReadyList+0xbc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d802      	bhi.n	80058aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058a4:	4a1c      	ldr	r2, [pc, #112]	; (8005918 <prvAddNewTaskToReadyList+0xbc>)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058aa:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <prvAddNewTaskToReadyList+0xc4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <prvAddNewTaskToReadyList+0xc4>)
 80058b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	2201      	movs	r2, #1
 80058ba:	409a      	lsls	r2, r3
 80058bc:	4b19      	ldr	r3, [pc, #100]	; (8005924 <prvAddNewTaskToReadyList+0xc8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	4a18      	ldr	r2, [pc, #96]	; (8005924 <prvAddNewTaskToReadyList+0xc8>)
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <prvAddNewTaskToReadyList+0xcc>)
 80058d4:	441a      	add	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3304      	adds	r3, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f7ff fe02 	bl	80054e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058e2:	f000 fdc3 	bl	800646c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058e6:	4b0d      	ldr	r3, [pc, #52]	; (800591c <prvAddNewTaskToReadyList+0xc0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00e      	beq.n	800590c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058ee:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <prvAddNewTaskToReadyList+0xbc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d207      	bcs.n	800590c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058fc:	4b0b      	ldr	r3, [pc, #44]	; (800592c <prvAddNewTaskToReadyList+0xd0>)
 80058fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	200005e8 	.word	0x200005e8
 8005918:	200004e8 	.word	0x200004e8
 800591c:	200005f4 	.word	0x200005f4
 8005920:	20000604 	.word	0x20000604
 8005924:	200005f0 	.word	0x200005f0
 8005928:	200004ec 	.word	0x200004ec
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d017      	beq.n	8005972 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005942:	4b13      	ldr	r3, [pc, #76]	; (8005990 <vTaskDelay+0x60>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <vTaskDelay+0x30>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	60bb      	str	r3, [r7, #8]
}
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005960:	f000 f884 	bl	8005a6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005964:	2100      	movs	r1, #0
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fbfc 	bl	8006164 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800596c:	f000 f88c 	bl	8005a88 <xTaskResumeAll>
 8005970:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d107      	bne.n	8005988 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <vTaskDelay+0x64>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000610 	.word	0x20000610
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059a6:	463a      	mov	r2, r7
 80059a8:	1d39      	adds	r1, r7, #4
 80059aa:	f107 0308 	add.w	r3, r7, #8
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fb fbbe 	bl	8001130 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	9202      	str	r2, [sp, #8]
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	2300      	movs	r3, #0
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	2300      	movs	r3, #0
 80059c4:	460a      	mov	r2, r1
 80059c6:	4921      	ldr	r1, [pc, #132]	; (8005a4c <vTaskStartScheduler+0xb4>)
 80059c8:	4821      	ldr	r0, [pc, #132]	; (8005a50 <vTaskStartScheduler+0xb8>)
 80059ca:	f7ff fe10 	bl	80055ee <xTaskCreateStatic>
 80059ce:	4603      	mov	r3, r0
 80059d0:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <vTaskStartScheduler+0xbc>)
 80059d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059d4:	4b1f      	ldr	r3, [pc, #124]	; (8005a54 <vTaskStartScheduler+0xbc>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059dc:	2301      	movs	r3, #1
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	e001      	b.n	80059e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d11b      	bne.n	8005a24 <vTaskStartScheduler+0x8c>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	613b      	str	r3, [r7, #16]
}
 80059fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a00:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <vTaskStartScheduler+0xc0>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	334c      	adds	r3, #76	; 0x4c
 8005a06:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <vTaskStartScheduler+0xc4>)
 8005a08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a0a:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <vTaskStartScheduler+0xc8>)
 8005a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a12:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <vTaskStartScheduler+0xcc>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005a18:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <vTaskStartScheduler+0xd0>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a1e:	f000 fc83 	bl	8006328 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a22:	e00e      	b.n	8005a42 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d10a      	bne.n	8005a42 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60fb      	str	r3, [r7, #12]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <vTaskStartScheduler+0xa8>
}
 8005a42:	bf00      	nop
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	08006b54 	.word	0x08006b54
 8005a50:	08005f3d 	.word	0x08005f3d
 8005a54:	2000060c 	.word	0x2000060c
 8005a58:	200004e8 	.word	0x200004e8
 8005a5c:	20000014 	.word	0x20000014
 8005a60:	20000608 	.word	0x20000608
 8005a64:	200005f4 	.word	0x200005f4
 8005a68:	200005ec 	.word	0x200005ec

08005a6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <vTaskSuspendAll+0x18>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a03      	ldr	r2, [pc, #12]	; (8005a84 <vTaskSuspendAll+0x18>)
 8005a78:	6013      	str	r3, [r2, #0]
}
 8005a7a:	bf00      	nop
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000610 	.word	0x20000610

08005a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a96:	4b41      	ldr	r3, [pc, #260]	; (8005b9c <xTaskResumeAll+0x114>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	603b      	str	r3, [r7, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ab4:	f000 fcaa 	bl	800640c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ab8:	4b38      	ldr	r3, [pc, #224]	; (8005b9c <xTaskResumeAll+0x114>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	4a37      	ldr	r2, [pc, #220]	; (8005b9c <xTaskResumeAll+0x114>)
 8005ac0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac2:	4b36      	ldr	r3, [pc, #216]	; (8005b9c <xTaskResumeAll+0x114>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d161      	bne.n	8005b8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005aca:	4b35      	ldr	r3, [pc, #212]	; (8005ba0 <xTaskResumeAll+0x118>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d05d      	beq.n	8005b8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ad2:	e02e      	b.n	8005b32 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005ad4:	4b33      	ldr	r3, [pc, #204]	; (8005ba4 <xTaskResumeAll+0x11c>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3318      	adds	r3, #24
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fd5b 	bl	800559c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fd56 	bl	800559c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	2201      	movs	r2, #1
 8005af6:	409a      	lsls	r2, r3
 8005af8:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <xTaskResumeAll+0x120>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	4a2a      	ldr	r2, [pc, #168]	; (8005ba8 <xTaskResumeAll+0x120>)
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4a27      	ldr	r2, [pc, #156]	; (8005bac <xTaskResumeAll+0x124>)
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f7ff fce4 	bl	80054e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <xTaskResumeAll+0x128>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d302      	bcc.n	8005b32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005b2c:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <xTaskResumeAll+0x12c>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b32:	4b1c      	ldr	r3, [pc, #112]	; (8005ba4 <xTaskResumeAll+0x11c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1cc      	bne.n	8005ad4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b40:	f000 fab6 	bl	80060b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b44:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <xTaskResumeAll+0x130>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d010      	beq.n	8005b72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b50:	f000 f836 	bl	8005bc0 <xTaskIncrementTick>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005b5a:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <xTaskResumeAll+0x12c>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f1      	bne.n	8005b50 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005b6c:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <xTaskResumeAll+0x130>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b72:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <xTaskResumeAll+0x12c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <xTaskResumeAll+0x134>)
 8005b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b8e:	f000 fc6d 	bl	800646c <vPortExitCritical>

	return xAlreadyYielded;
 8005b92:	68bb      	ldr	r3, [r7, #8]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000610 	.word	0x20000610
 8005ba0:	200005e8 	.word	0x200005e8
 8005ba4:	200005a8 	.word	0x200005a8
 8005ba8:	200005f0 	.word	0x200005f0
 8005bac:	200004ec 	.word	0x200004ec
 8005bb0:	200004e8 	.word	0x200004e8
 8005bb4:	200005fc 	.word	0x200005fc
 8005bb8:	200005f8 	.word	0x200005f8
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bca:	4b51      	ldr	r3, [pc, #324]	; (8005d10 <xTaskIncrementTick+0x150>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f040 808d 	bne.w	8005cee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bd4:	4b4f      	ldr	r3, [pc, #316]	; (8005d14 <xTaskIncrementTick+0x154>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bdc:	4a4d      	ldr	r2, [pc, #308]	; (8005d14 <xTaskIncrementTick+0x154>)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d120      	bne.n	8005c2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005be8:	4b4b      	ldr	r3, [pc, #300]	; (8005d18 <xTaskIncrementTick+0x158>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <xTaskIncrementTick+0x48>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	603b      	str	r3, [r7, #0]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <xTaskIncrementTick+0x46>
 8005c08:	4b43      	ldr	r3, [pc, #268]	; (8005d18 <xTaskIncrementTick+0x158>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	4b43      	ldr	r3, [pc, #268]	; (8005d1c <xTaskIncrementTick+0x15c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a41      	ldr	r2, [pc, #260]	; (8005d18 <xTaskIncrementTick+0x158>)
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	4a41      	ldr	r2, [pc, #260]	; (8005d1c <xTaskIncrementTick+0x15c>)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	4b40      	ldr	r3, [pc, #256]	; (8005d20 <xTaskIncrementTick+0x160>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	4a3f      	ldr	r2, [pc, #252]	; (8005d20 <xTaskIncrementTick+0x160>)
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	f000 fa43 	bl	80060b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c2a:	4b3e      	ldr	r3, [pc, #248]	; (8005d24 <xTaskIncrementTick+0x164>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d34d      	bcc.n	8005cd0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c34:	4b38      	ldr	r3, [pc, #224]	; (8005d18 <xTaskIncrementTick+0x158>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <xTaskIncrementTick+0x82>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <xTaskIncrementTick+0x84>
 8005c42:	2300      	movs	r3, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c48:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <xTaskIncrementTick+0x164>)
 8005c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4e:	601a      	str	r2, [r3, #0]
					break;
 8005c50:	e03e      	b.n	8005cd0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c52:	4b31      	ldr	r3, [pc, #196]	; (8005d18 <xTaskIncrementTick+0x158>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d203      	bcs.n	8005c72 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c6a:	4a2e      	ldr	r2, [pc, #184]	; (8005d24 <xTaskIncrementTick+0x164>)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6013      	str	r3, [r2, #0]
						break;
 8005c70:	e02e      	b.n	8005cd0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3304      	adds	r3, #4
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff fc90 	bl	800559c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	3318      	adds	r3, #24
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fc87 	bl	800559c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	2201      	movs	r2, #1
 8005c94:	409a      	lsls	r2, r3
 8005c96:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <xTaskIncrementTick+0x168>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	4a22      	ldr	r2, [pc, #136]	; (8005d28 <xTaskIncrementTick+0x168>)
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <xTaskIncrementTick+0x16c>)
 8005cae:	441a      	add	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f7ff fc15 	bl	80054e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc0:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <xTaskIncrementTick+0x170>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d3b4      	bcc.n	8005c34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cce:	e7b1      	b.n	8005c34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cd0:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <xTaskIncrementTick+0x170>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd6:	4915      	ldr	r1, [pc, #84]	; (8005d2c <xTaskIncrementTick+0x16c>)
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d907      	bls.n	8005cf8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e004      	b.n	8005cf8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005cee:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <xTaskIncrementTick+0x174>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	4a0f      	ldr	r2, [pc, #60]	; (8005d34 <xTaskIncrementTick+0x174>)
 8005cf6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005cf8:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <xTaskIncrementTick+0x178>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005d00:	2301      	movs	r3, #1
 8005d02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d04:	697b      	ldr	r3, [r7, #20]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000610 	.word	0x20000610
 8005d14:	200005ec 	.word	0x200005ec
 8005d18:	200005a0 	.word	0x200005a0
 8005d1c:	200005a4 	.word	0x200005a4
 8005d20:	20000600 	.word	0x20000600
 8005d24:	20000608 	.word	0x20000608
 8005d28:	200005f0 	.word	0x200005f0
 8005d2c:	200004ec 	.word	0x200004ec
 8005d30:	200004e8 	.word	0x200004e8
 8005d34:	200005f8 	.word	0x200005f8
 8005d38:	200005fc 	.word	0x200005fc

08005d3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d42:	4b29      	ldr	r3, [pc, #164]	; (8005de8 <vTaskSwitchContext+0xac>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d4a:	4b28      	ldr	r3, [pc, #160]	; (8005dec <vTaskSwitchContext+0xb0>)
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d50:	e044      	b.n	8005ddc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005d52:	4b26      	ldr	r3, [pc, #152]	; (8005dec <vTaskSwitchContext+0xb0>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005d58:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <vTaskSwitchContext+0xb4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	fab3 f383 	clz	r3, r3
 8005d64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d66:	7afb      	ldrb	r3, [r7, #11]
 8005d68:	f1c3 031f 	rsb	r3, r3, #31
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	4921      	ldr	r1, [pc, #132]	; (8005df4 <vTaskSwitchContext+0xb8>)
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10a      	bne.n	8005d98 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	607b      	str	r3, [r7, #4]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <vTaskSwitchContext+0x5a>
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <vTaskSwitchContext+0xb8>)
 8005da4:	4413      	add	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	605a      	str	r2, [r3, #4]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	3308      	adds	r3, #8
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d104      	bne.n	8005dc8 <vTaskSwitchContext+0x8c>
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	605a      	str	r2, [r3, #4]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <vTaskSwitchContext+0xbc>)
 8005dd0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <vTaskSwitchContext+0xbc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	334c      	adds	r3, #76	; 0x4c
 8005dd8:	4a08      	ldr	r2, [pc, #32]	; (8005dfc <vTaskSwitchContext+0xc0>)
 8005dda:	6013      	str	r3, [r2, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000610 	.word	0x20000610
 8005dec:	200005fc 	.word	0x200005fc
 8005df0:	200005f0 	.word	0x200005f0
 8005df4:	200004ec 	.word	0x200004ec
 8005df8:	200004e8 	.word	0x200004e8
 8005dfc:	20000014 	.word	0x20000014

08005e00 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	617b      	str	r3, [r7, #20]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005e28:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	613b      	str	r3, [r7, #16]
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005e46:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e50:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e52:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3318      	adds	r3, #24
 8005e58:	4619      	mov	r1, r3
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7ff fb43 	bl	80054e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e60:	2101      	movs	r1, #1
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f97e 	bl	8006164 <prvAddCurrentTaskToDelayedList>
}
 8005e68:	bf00      	nop
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20000610 	.word	0x20000610
 8005e74:	200004e8 	.word	0x200004e8

08005e78 <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005e82:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	613b      	str	r3, [r7, #16]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	60fb      	str	r3, [r7, #12]
}
 8005ec8:	bf00      	nop
 8005eca:	e7fe      	b.n	8005eca <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fb65 	bl	800559c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fb60 	bl	800559c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	4a10      	ldr	r2, [pc, #64]	; (8005f2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4a0d      	ldr	r2, [pc, #52]	; (8005f30 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005efc:	441a      	add	r2, r3
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7ff faee 	bl	80054e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d902      	bls.n	8005f1e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005f18:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
	}
}
 8005f1e:	bf00      	nop
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000610 	.word	0x20000610
 8005f2c:	200005f0 	.word	0x200005f0
 8005f30:	200004ec 	.word	0x200004ec
 8005f34:	200004e8 	.word	0x200004e8
 8005f38:	200005fc 	.word	0x200005fc

08005f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f44:	f000 f852 	bl	8005fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <prvIdleTask+0x28>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d9f9      	bls.n	8005f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <prvIdleTask+0x2c>)
 8005f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f60:	e7f0      	b.n	8005f44 <prvIdleTask+0x8>
 8005f62:	bf00      	nop
 8005f64:	200004ec 	.word	0x200004ec
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f72:	2300      	movs	r3, #0
 8005f74:	607b      	str	r3, [r7, #4]
 8005f76:	e00c      	b.n	8005f92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4a12      	ldr	r2, [pc, #72]	; (8005fcc <prvInitialiseTaskLists+0x60>)
 8005f84:	4413      	add	r3, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fa82 	bl	8005490 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	607b      	str	r3, [r7, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b06      	cmp	r3, #6
 8005f96:	d9ef      	bls.n	8005f78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f98:	480d      	ldr	r0, [pc, #52]	; (8005fd0 <prvInitialiseTaskLists+0x64>)
 8005f9a:	f7ff fa79 	bl	8005490 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f9e:	480d      	ldr	r0, [pc, #52]	; (8005fd4 <prvInitialiseTaskLists+0x68>)
 8005fa0:	f7ff fa76 	bl	8005490 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fa4:	480c      	ldr	r0, [pc, #48]	; (8005fd8 <prvInitialiseTaskLists+0x6c>)
 8005fa6:	f7ff fa73 	bl	8005490 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005faa:	480c      	ldr	r0, [pc, #48]	; (8005fdc <prvInitialiseTaskLists+0x70>)
 8005fac:	f7ff fa70 	bl	8005490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fb0:	480b      	ldr	r0, [pc, #44]	; (8005fe0 <prvInitialiseTaskLists+0x74>)
 8005fb2:	f7ff fa6d 	bl	8005490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <prvInitialiseTaskLists+0x78>)
 8005fb8:	4a05      	ldr	r2, [pc, #20]	; (8005fd0 <prvInitialiseTaskLists+0x64>)
 8005fba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <prvInitialiseTaskLists+0x7c>)
 8005fbe:	4a05      	ldr	r2, [pc, #20]	; (8005fd4 <prvInitialiseTaskLists+0x68>)
 8005fc0:	601a      	str	r2, [r3, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	200004ec 	.word	0x200004ec
 8005fd0:	20000578 	.word	0x20000578
 8005fd4:	2000058c 	.word	0x2000058c
 8005fd8:	200005a8 	.word	0x200005a8
 8005fdc:	200005bc 	.word	0x200005bc
 8005fe0:	200005d4 	.word	0x200005d4
 8005fe4:	200005a0 	.word	0x200005a0
 8005fe8:	200005a4 	.word	0x200005a4

08005fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ff2:	e019      	b.n	8006028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ff4:	f000 fa0a 	bl	800640c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005ff8:	4b10      	ldr	r3, [pc, #64]	; (800603c <prvCheckTasksWaitingTermination+0x50>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fac9 	bl	800559c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800600a:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <prvCheckTasksWaitingTermination+0x54>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3b01      	subs	r3, #1
 8006010:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <prvCheckTasksWaitingTermination+0x54>)
 8006012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006014:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <prvCheckTasksWaitingTermination+0x58>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3b01      	subs	r3, #1
 800601a:	4a0a      	ldr	r2, [pc, #40]	; (8006044 <prvCheckTasksWaitingTermination+0x58>)
 800601c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800601e:	f000 fa25 	bl	800646c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f810 	bl	8006048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <prvCheckTasksWaitingTermination+0x58>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e1      	bne.n	8005ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200005bc 	.word	0x200005bc
 8006040:	200005e8 	.word	0x200005e8
 8006044:	200005d0 	.word	0x200005d0

08006048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	334c      	adds	r3, #76	; 0x4c
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fcaf 	bl	80069b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d108      	bne.n	8006076 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fb55 	bl	8006718 <vPortFree>
				vPortFree( pxTCB );
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fb52 	bl	8006718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006074:	e018      	b.n	80060a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d103      	bne.n	8006088 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fb49 	bl	8006718 <vPortFree>
	}
 8006086:	e00f      	b.n	80060a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800608e:	2b02      	cmp	r3, #2
 8006090:	d00a      	beq.n	80060a8 <prvDeleteTCB+0x60>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	60fb      	str	r3, [r7, #12]
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <prvDeleteTCB+0x5e>
	}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060b6:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <prvResetNextTaskUnblockTime+0x40>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <prvResetNextTaskUnblockTime+0x14>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <prvResetNextTaskUnblockTime+0x16>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <prvResetNextTaskUnblockTime+0x44>)
 80060cc:	f04f 32ff 	mov.w	r2, #4294967295
 80060d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060d2:	e008      	b.n	80060e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <prvResetNextTaskUnblockTime+0x40>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <prvResetNextTaskUnblockTime+0x44>)
 80060e4:	6013      	str	r3, [r2, #0]
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr
 80060f0:	200005a0 	.word	0x200005a0
 80060f4:	20000608 	.word	0x20000608

080060f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060fe:	4b0b      	ldr	r3, [pc, #44]	; (800612c <xTaskGetSchedulerState+0x34>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006106:	2301      	movs	r3, #1
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	e008      	b.n	800611e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800610c:	4b08      	ldr	r3, [pc, #32]	; (8006130 <xTaskGetSchedulerState+0x38>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006114:	2302      	movs	r3, #2
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	e001      	b.n	800611e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800611a:	2300      	movs	r3, #0
 800611c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800611e:	687b      	ldr	r3, [r7, #4]
	}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	200005f4 	.word	0x200005f4
 8006130:	20000610 	.word	0x20000610

08006134 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <uxTaskResetEventItemValue+0x2c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006142:	4b07      	ldr	r3, [pc, #28]	; (8006160 <uxTaskResetEventItemValue+0x2c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <uxTaskResetEventItemValue+0x2c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f1c2 0207 	rsb	r2, r2, #7
 8006150:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006152:	687b      	ldr	r3, [r7, #4]
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	200004e8 	.word	0x200004e8

08006164 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800616e:	4b29      	ldr	r3, [pc, #164]	; (8006214 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006174:	4b28      	ldr	r3, [pc, #160]	; (8006218 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3304      	adds	r3, #4
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fa0e 	bl	800559c <uxListRemove>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10b      	bne.n	800619e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006186:	4b24      	ldr	r3, [pc, #144]	; (8006218 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	2201      	movs	r2, #1
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43da      	mvns	r2, r3
 8006194:	4b21      	ldr	r3, [pc, #132]	; (800621c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4013      	ands	r3, r2
 800619a:	4a20      	ldr	r2, [pc, #128]	; (800621c <prvAddCurrentTaskToDelayedList+0xb8>)
 800619c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d10a      	bne.n	80061bc <prvAddCurrentTaskToDelayedList+0x58>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ac:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	481a      	ldr	r0, [pc, #104]	; (8006220 <prvAddCurrentTaskToDelayedList+0xbc>)
 80061b6:	f7ff f996 	bl	80054e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061ba:	e026      	b.n	800620a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4413      	add	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061c4:	4b14      	ldr	r3, [pc, #80]	; (8006218 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d209      	bcs.n	80061e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061d4:	4b13      	ldr	r3, [pc, #76]	; (8006224 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3304      	adds	r3, #4
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f7ff f9a3 	bl	800552c <vListInsert>
}
 80061e6:	e010      	b.n	800620a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e8:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <prvAddCurrentTaskToDelayedList+0xc4>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f7ff f999 	bl	800552c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061fa:	4b0c      	ldr	r3, [pc, #48]	; (800622c <prvAddCurrentTaskToDelayedList+0xc8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	429a      	cmp	r2, r3
 8006202:	d202      	bcs.n	800620a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006204:	4a09      	ldr	r2, [pc, #36]	; (800622c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6013      	str	r3, [r2, #0]
}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	200005ec 	.word	0x200005ec
 8006218:	200004e8 	.word	0x200004e8
 800621c:	200005f0 	.word	0x200005f0
 8006220:	200005d4 	.word	0x200005d4
 8006224:	200005a4 	.word	0x200005a4
 8006228:	200005a0 	.word	0x200005a0
 800622c:	20000608 	.word	0x20000608

08006230 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3b04      	subs	r3, #4
 8006240:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3b04      	subs	r3, #4
 800624e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3b04      	subs	r3, #4
 800625e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <pxPortInitialiseStack+0x54>)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b14      	subs	r3, #20
 800626a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3b20      	subs	r3, #32
 8006276:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006278:	68fb      	ldr	r3, [r7, #12]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr
 8006284:	08006289 	.word	0x08006289

08006288 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <prvTaskExitError+0x54>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629a:	d00a      	beq.n	80062b2 <prvTaskExitError+0x2a>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	60fb      	str	r3, [r7, #12]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <prvTaskExitError+0x28>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	60bb      	str	r3, [r7, #8]
}
 80062c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062c6:	bf00      	nop
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0fc      	beq.n	80062c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	20000010 	.word	0x20000010

080062e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062e0:	4b07      	ldr	r3, [pc, #28]	; (8006300 <pxCurrentTCBConst2>)
 80062e2:	6819      	ldr	r1, [r3, #0]
 80062e4:	6808      	ldr	r0, [r1, #0]
 80062e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062ea:	f380 8809 	msr	PSP, r0
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f380 8811 	msr	BASEPRI, r0
 80062fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80062fe:	4770      	bx	lr

08006300 <pxCurrentTCBConst2>:
 8006300:	200004e8 	.word	0x200004e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop

08006308 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006308:	4806      	ldr	r0, [pc, #24]	; (8006324 <prvPortStartFirstTask+0x1c>)
 800630a:	6800      	ldr	r0, [r0, #0]
 800630c:	6800      	ldr	r0, [r0, #0]
 800630e:	f380 8808 	msr	MSP, r0
 8006312:	b662      	cpsie	i
 8006314:	b661      	cpsie	f
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	df00      	svc	0
 8006320:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006322:	bf00      	nop
 8006324:	e000ed08 	.word	0xe000ed08

08006328 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800632e:	4b32      	ldr	r3, [pc, #200]	; (80063f8 <xPortStartScheduler+0xd0>)
 8006330:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	22ff      	movs	r2, #255	; 0xff
 800633e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006350:	b2da      	uxtb	r2, r3
 8006352:	4b2a      	ldr	r3, [pc, #168]	; (80063fc <xPortStartScheduler+0xd4>)
 8006354:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006356:	4b2a      	ldr	r3, [pc, #168]	; (8006400 <xPortStartScheduler+0xd8>)
 8006358:	2207      	movs	r2, #7
 800635a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800635c:	e009      	b.n	8006372 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800635e:	4b28      	ldr	r3, [pc, #160]	; (8006400 <xPortStartScheduler+0xd8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3b01      	subs	r3, #1
 8006364:	4a26      	ldr	r2, [pc, #152]	; (8006400 <xPortStartScheduler+0xd8>)
 8006366:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	b2db      	uxtb	r3, r3
 8006370:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d0ef      	beq.n	800635e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800637e:	4b20      	ldr	r3, [pc, #128]	; (8006400 <xPortStartScheduler+0xd8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f1c3 0307 	rsb	r3, r3, #7
 8006386:	2b04      	cmp	r3, #4
 8006388:	d00a      	beq.n	80063a0 <xPortStartScheduler+0x78>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	60bb      	str	r3, [r7, #8]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063a0:	4b17      	ldr	r3, [pc, #92]	; (8006400 <xPortStartScheduler+0xd8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	4a16      	ldr	r2, [pc, #88]	; (8006400 <xPortStartScheduler+0xd8>)
 80063a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063aa:	4b15      	ldr	r3, [pc, #84]	; (8006400 <xPortStartScheduler+0xd8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063b2:	4a13      	ldr	r2, [pc, #76]	; (8006400 <xPortStartScheduler+0xd8>)
 80063b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063be:	4b11      	ldr	r3, [pc, #68]	; (8006404 <xPortStartScheduler+0xdc>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a10      	ldr	r2, [pc, #64]	; (8006404 <xPortStartScheduler+0xdc>)
 80063c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063ca:	4b0e      	ldr	r3, [pc, #56]	; (8006404 <xPortStartScheduler+0xdc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a0d      	ldr	r2, [pc, #52]	; (8006404 <xPortStartScheduler+0xdc>)
 80063d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063d6:	f000 f8b9 	bl	800654c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063da:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <xPortStartScheduler+0xe0>)
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063e0:	f7ff ff92 	bl	8006308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063e4:	f7ff fcaa 	bl	8005d3c <vTaskSwitchContext>
	prvTaskExitError();
 80063e8:	f7ff ff4e 	bl	8006288 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	e000e400 	.word	0xe000e400
 80063fc:	20000614 	.word	0x20000614
 8006400:	20000618 	.word	0x20000618
 8006404:	e000ed20 	.word	0xe000ed20
 8006408:	20000010 	.word	0x20000010

0800640c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	607b      	str	r3, [r7, #4]
}
 8006424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006426:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <vPortEnterCritical+0x58>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	4a0d      	ldr	r2, [pc, #52]	; (8006464 <vPortEnterCritical+0x58>)
 800642e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <vPortEnterCritical+0x58>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d10f      	bne.n	8006458 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006438:	4b0b      	ldr	r3, [pc, #44]	; (8006468 <vPortEnterCritical+0x5c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <vPortEnterCritical+0x4c>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	603b      	str	r3, [r7, #0]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <vPortEnterCritical+0x4a>
	}
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20000010 	.word	0x20000010
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006472:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <vPortExitCritical+0x4c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <vPortExitCritical+0x24>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	607b      	str	r3, [r7, #4]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006490:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <vPortExitCritical+0x4c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3b01      	subs	r3, #1
 8006496:	4a08      	ldr	r2, [pc, #32]	; (80064b8 <vPortExitCritical+0x4c>)
 8006498:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800649a:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <vPortExitCritical+0x4c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d105      	bne.n	80064ae <vPortExitCritical+0x42>
 80064a2:	2300      	movs	r3, #0
 80064a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr
 80064b8:	20000010 	.word	0x20000010
 80064bc:	00000000 	.word	0x00000000

080064c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064c0:	f3ef 8009 	mrs	r0, PSP
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <pxCurrentTCBConst>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064d0:	6010      	str	r0, [r2, #0]
 80064d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80064d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064da:	f380 8811 	msr	BASEPRI, r0
 80064de:	f7ff fc2d 	bl	8005d3c <vTaskSwitchContext>
 80064e2:	f04f 0000 	mov.w	r0, #0
 80064e6:	f380 8811 	msr	BASEPRI, r0
 80064ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80064ee:	6819      	ldr	r1, [r3, #0]
 80064f0:	6808      	ldr	r0, [r1, #0]
 80064f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064f6:	f380 8809 	msr	PSP, r0
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	4770      	bx	lr

08006500 <pxCurrentTCBConst>:
 8006500:	200004e8 	.word	0x200004e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	607b      	str	r3, [r7, #4]
}
 8006520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006522:	f7ff fb4d 	bl	8005bc0 <xTaskIncrementTick>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800652c:	4b06      	ldr	r3, [pc, #24]	; (8006548 <xPortSysTickHandler+0x40>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f383 8811 	msr	BASEPRI, r3
}
 800653e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <vPortSetupTimerInterrupt+0x30>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006556:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800655c:	4b09      	ldr	r3, [pc, #36]	; (8006584 <vPortSetupTimerInterrupt+0x38>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a09      	ldr	r2, [pc, #36]	; (8006588 <vPortSetupTimerInterrupt+0x3c>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	099b      	lsrs	r3, r3, #6
 8006568:	4a08      	ldr	r2, [pc, #32]	; (800658c <vPortSetupTimerInterrupt+0x40>)
 800656a:	3b01      	subs	r3, #1
 800656c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800656e:	4b03      	ldr	r3, [pc, #12]	; (800657c <vPortSetupTimerInterrupt+0x30>)
 8006570:	2207      	movs	r2, #7
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr
 800657c:	e000e010 	.word	0xe000e010
 8006580:	e000e018 	.word	0xe000e018
 8006584:	20000004 	.word	0x20000004
 8006588:	10624dd3 	.word	0x10624dd3
 800658c:	e000e014 	.word	0xe000e014

08006590 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800659c:	f7ff fa66 	bl	8005a6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065a0:	4b58      	ldr	r3, [pc, #352]	; (8006704 <pvPortMalloc+0x174>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065a8:	f000 f910 	bl	80067cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065ac:	4b56      	ldr	r3, [pc, #344]	; (8006708 <pvPortMalloc+0x178>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f040 808e 	bne.w	80066d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01d      	beq.n	80065fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80065c0:	2208      	movs	r2, #8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4413      	add	r3, r2
 80065c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d014      	beq.n	80065fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f023 0307 	bic.w	r3, r3, #7
 80065d8:	3308      	adds	r3, #8
 80065da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <pvPortMalloc+0x6c>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	617b      	str	r3, [r7, #20]
}
 80065f8:	bf00      	nop
 80065fa:	e7fe      	b.n	80065fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d069      	beq.n	80066d6 <pvPortMalloc+0x146>
 8006602:	4b42      	ldr	r3, [pc, #264]	; (800670c <pvPortMalloc+0x17c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	429a      	cmp	r2, r3
 800660a:	d864      	bhi.n	80066d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800660c:	4b40      	ldr	r3, [pc, #256]	; (8006710 <pvPortMalloc+0x180>)
 800660e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006610:	4b3f      	ldr	r3, [pc, #252]	; (8006710 <pvPortMalloc+0x180>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006616:	e004      	b.n	8006622 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	429a      	cmp	r2, r3
 800662a:	d903      	bls.n	8006634 <pvPortMalloc+0xa4>
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f1      	bne.n	8006618 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006634:	4b33      	ldr	r3, [pc, #204]	; (8006704 <pvPortMalloc+0x174>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663a:	429a      	cmp	r2, r3
 800663c:	d04b      	beq.n	80066d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2208      	movs	r2, #8
 8006644:	4413      	add	r3, r2
 8006646:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	2308      	movs	r3, #8
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	429a      	cmp	r2, r3
 800665e:	d91f      	bls.n	80066a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4413      	add	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <pvPortMalloc+0xf8>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	613b      	str	r3, [r7, #16]
}
 8006684:	bf00      	nop
 8006686:	e7fe      	b.n	8006686 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	1ad2      	subs	r2, r2, r3
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800669a:	69b8      	ldr	r0, [r7, #24]
 800669c:	f000 f8f8 	bl	8006890 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066a0:	4b1a      	ldr	r3, [pc, #104]	; (800670c <pvPortMalloc+0x17c>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	4a18      	ldr	r2, [pc, #96]	; (800670c <pvPortMalloc+0x17c>)
 80066ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066ae:	4b17      	ldr	r3, [pc, #92]	; (800670c <pvPortMalloc+0x17c>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b18      	ldr	r3, [pc, #96]	; (8006714 <pvPortMalloc+0x184>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d203      	bcs.n	80066c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066ba:	4b14      	ldr	r3, [pc, #80]	; (800670c <pvPortMalloc+0x17c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a15      	ldr	r2, [pc, #84]	; (8006714 <pvPortMalloc+0x184>)
 80066c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	4b10      	ldr	r3, [pc, #64]	; (8006708 <pvPortMalloc+0x178>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066d6:	f7ff f9d7 	bl	8005a88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <pvPortMalloc+0x16a>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	60fb      	str	r3, [r7, #12]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <pvPortMalloc+0x168>
	return pvReturn;
 80066fa:	69fb      	ldr	r3, [r7, #28]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3728      	adds	r7, #40	; 0x28
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20001224 	.word	0x20001224
 8006708:	20001230 	.word	0x20001230
 800670c:	20001228 	.word	0x20001228
 8006710:	2000121c 	.word	0x2000121c
 8006714:	2000122c 	.word	0x2000122c

08006718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d048      	beq.n	80067bc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800672a:	2308      	movs	r3, #8
 800672c:	425b      	negs	r3, r3
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4413      	add	r3, r2
 8006732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	4b21      	ldr	r3, [pc, #132]	; (80067c4 <vPortFree+0xac>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4013      	ands	r3, r2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <vPortFree+0x44>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	60fb      	str	r3, [r7, #12]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <vPortFree+0x62>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	60bb      	str	r3, [r7, #8]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <vPortFree+0xac>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4013      	ands	r3, r2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d019      	beq.n	80067bc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d115      	bne.n	80067bc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <vPortFree+0xac>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	43db      	mvns	r3, r3
 800679a:	401a      	ands	r2, r3
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067a0:	f7ff f964 	bl	8005a6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <vPortFree+0xb0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4413      	add	r3, r2
 80067ae:	4a06      	ldr	r2, [pc, #24]	; (80067c8 <vPortFree+0xb0>)
 80067b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067b2:	6938      	ldr	r0, [r7, #16]
 80067b4:	f000 f86c 	bl	8006890 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80067b8:	f7ff f966 	bl	8005a88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067bc:	bf00      	nop
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20001230 	.word	0x20001230
 80067c8:	20001228 	.word	0x20001228

080067cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80067d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067d8:	4b27      	ldr	r3, [pc, #156]	; (8006878 <prvHeapInit+0xac>)
 80067da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00c      	beq.n	8006800 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3307      	adds	r3, #7
 80067ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0307 	bic.w	r3, r3, #7
 80067f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <prvHeapInit+0xac>)
 80067fc:	4413      	add	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006804:	4a1d      	ldr	r2, [pc, #116]	; (800687c <prvHeapInit+0xb0>)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800680a:	4b1c      	ldr	r3, [pc, #112]	; (800687c <prvHeapInit+0xb0>)
 800680c:	2200      	movs	r2, #0
 800680e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	4413      	add	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006818:	2208      	movs	r2, #8
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0307 	bic.w	r3, r3, #7
 8006826:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4a15      	ldr	r2, [pc, #84]	; (8006880 <prvHeapInit+0xb4>)
 800682c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800682e:	4b14      	ldr	r3, [pc, #80]	; (8006880 <prvHeapInit+0xb4>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2200      	movs	r2, #0
 8006834:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006836:	4b12      	ldr	r3, [pc, #72]	; (8006880 <prvHeapInit+0xb4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	1ad2      	subs	r2, r2, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <prvHeapInit+0xb4>)
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	4a0a      	ldr	r2, [pc, #40]	; (8006884 <prvHeapInit+0xb8>)
 800685a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	4a09      	ldr	r2, [pc, #36]	; (8006888 <prvHeapInit+0xbc>)
 8006862:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006864:	4b09      	ldr	r3, [pc, #36]	; (800688c <prvHeapInit+0xc0>)
 8006866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800686a:	601a      	str	r2, [r3, #0]
}
 800686c:	bf00      	nop
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	2000061c 	.word	0x2000061c
 800687c:	2000121c 	.word	0x2000121c
 8006880:	20001224 	.word	0x20001224
 8006884:	2000122c 	.word	0x2000122c
 8006888:	20001228 	.word	0x20001228
 800688c:	20001230 	.word	0x20001230

08006890 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006898:	4b27      	ldr	r3, [pc, #156]	; (8006938 <prvInsertBlockIntoFreeList+0xa8>)
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	e002      	b.n	80068a4 <prvInsertBlockIntoFreeList+0x14>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d8f7      	bhi.n	800689e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	4413      	add	r3, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d108      	bne.n	80068d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	441a      	add	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	441a      	add	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d118      	bne.n	8006918 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b14      	ldr	r3, [pc, #80]	; (800693c <prvInsertBlockIntoFreeList+0xac>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d00d      	beq.n	800690e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	441a      	add	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	e008      	b.n	8006920 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800690e:	4b0b      	ldr	r3, [pc, #44]	; (800693c <prvInsertBlockIntoFreeList+0xac>)
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	e003      	b.n	8006920 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	429a      	cmp	r2, r3
 8006926:	d002      	beq.n	800692e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr
 8006938:	2000121c 	.word	0x2000121c
 800693c:	20001224 	.word	0x20001224

08006940 <__libc_init_array>:
 8006940:	b570      	push	{r4, r5, r6, lr}
 8006942:	2600      	movs	r6, #0
 8006944:	4d0c      	ldr	r5, [pc, #48]	; (8006978 <__libc_init_array+0x38>)
 8006946:	4c0d      	ldr	r4, [pc, #52]	; (800697c <__libc_init_array+0x3c>)
 8006948:	1b64      	subs	r4, r4, r5
 800694a:	10a4      	asrs	r4, r4, #2
 800694c:	42a6      	cmp	r6, r4
 800694e:	d109      	bne.n	8006964 <__libc_init_array+0x24>
 8006950:	f000 f8e2 	bl	8006b18 <_init>
 8006954:	2600      	movs	r6, #0
 8006956:	4d0a      	ldr	r5, [pc, #40]	; (8006980 <__libc_init_array+0x40>)
 8006958:	4c0a      	ldr	r4, [pc, #40]	; (8006984 <__libc_init_array+0x44>)
 800695a:	1b64      	subs	r4, r4, r5
 800695c:	10a4      	asrs	r4, r4, #2
 800695e:	42a6      	cmp	r6, r4
 8006960:	d105      	bne.n	800696e <__libc_init_array+0x2e>
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	f855 3b04 	ldr.w	r3, [r5], #4
 8006968:	4798      	blx	r3
 800696a:	3601      	adds	r6, #1
 800696c:	e7ee      	b.n	800694c <__libc_init_array+0xc>
 800696e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006972:	4798      	blx	r3
 8006974:	3601      	adds	r6, #1
 8006976:	e7f2      	b.n	800695e <__libc_init_array+0x1e>
 8006978:	08006be8 	.word	0x08006be8
 800697c:	08006be8 	.word	0x08006be8
 8006980:	08006be8 	.word	0x08006be8
 8006984:	08006bec 	.word	0x08006bec

08006988 <__retarget_lock_acquire_recursive>:
 8006988:	4770      	bx	lr

0800698a <__retarget_lock_release_recursive>:
 800698a:	4770      	bx	lr

0800698c <memset>:
 800698c:	4603      	mov	r3, r0
 800698e:	4402      	add	r2, r0
 8006990:	4293      	cmp	r3, r2
 8006992:	d100      	bne.n	8006996 <memset+0xa>
 8006994:	4770      	bx	lr
 8006996:	f803 1b01 	strb.w	r1, [r3], #1
 800699a:	e7f9      	b.n	8006990 <memset+0x4>

0800699c <cleanup_glue>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	460c      	mov	r4, r1
 80069a0:	6809      	ldr	r1, [r1, #0]
 80069a2:	4605      	mov	r5, r0
 80069a4:	b109      	cbz	r1, 80069aa <cleanup_glue+0xe>
 80069a6:	f7ff fff9 	bl	800699c <cleanup_glue>
 80069aa:	4621      	mov	r1, r4
 80069ac:	4628      	mov	r0, r5
 80069ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069b2:	f000 b869 	b.w	8006a88 <_free_r>
	...

080069b8 <_reclaim_reent>:
 80069b8:	4b2c      	ldr	r3, [pc, #176]	; (8006a6c <_reclaim_reent+0xb4>)
 80069ba:	b570      	push	{r4, r5, r6, lr}
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4604      	mov	r4, r0
 80069c0:	4283      	cmp	r3, r0
 80069c2:	d051      	beq.n	8006a68 <_reclaim_reent+0xb0>
 80069c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80069c6:	b143      	cbz	r3, 80069da <_reclaim_reent+0x22>
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d14a      	bne.n	8006a64 <_reclaim_reent+0xac>
 80069ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069d0:	6819      	ldr	r1, [r3, #0]
 80069d2:	b111      	cbz	r1, 80069da <_reclaim_reent+0x22>
 80069d4:	4620      	mov	r0, r4
 80069d6:	f000 f857 	bl	8006a88 <_free_r>
 80069da:	6961      	ldr	r1, [r4, #20]
 80069dc:	b111      	cbz	r1, 80069e4 <_reclaim_reent+0x2c>
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 f852 	bl	8006a88 <_free_r>
 80069e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80069e6:	b111      	cbz	r1, 80069ee <_reclaim_reent+0x36>
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 f84d 	bl	8006a88 <_free_r>
 80069ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069f0:	b111      	cbz	r1, 80069f8 <_reclaim_reent+0x40>
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f848 	bl	8006a88 <_free_r>
 80069f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80069fa:	b111      	cbz	r1, 8006a02 <_reclaim_reent+0x4a>
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 f843 	bl	8006a88 <_free_r>
 8006a02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006a04:	b111      	cbz	r1, 8006a0c <_reclaim_reent+0x54>
 8006a06:	4620      	mov	r0, r4
 8006a08:	f000 f83e 	bl	8006a88 <_free_r>
 8006a0c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006a0e:	b111      	cbz	r1, 8006a16 <_reclaim_reent+0x5e>
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 f839 	bl	8006a88 <_free_r>
 8006a16:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006a18:	b111      	cbz	r1, 8006a20 <_reclaim_reent+0x68>
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 f834 	bl	8006a88 <_free_r>
 8006a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a22:	b111      	cbz	r1, 8006a2a <_reclaim_reent+0x72>
 8006a24:	4620      	mov	r0, r4
 8006a26:	f000 f82f 	bl	8006a88 <_free_r>
 8006a2a:	69a3      	ldr	r3, [r4, #24]
 8006a2c:	b1e3      	cbz	r3, 8006a68 <_reclaim_reent+0xb0>
 8006a2e:	4620      	mov	r0, r4
 8006a30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a32:	4798      	blx	r3
 8006a34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a36:	b1b9      	cbz	r1, 8006a68 <_reclaim_reent+0xb0>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a3e:	f7ff bfad 	b.w	800699c <cleanup_glue>
 8006a42:	5949      	ldr	r1, [r1, r5]
 8006a44:	b941      	cbnz	r1, 8006a58 <_reclaim_reent+0xa0>
 8006a46:	3504      	adds	r5, #4
 8006a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a4a:	2d80      	cmp	r5, #128	; 0x80
 8006a4c:	68d9      	ldr	r1, [r3, #12]
 8006a4e:	d1f8      	bne.n	8006a42 <_reclaim_reent+0x8a>
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 f819 	bl	8006a88 <_free_r>
 8006a56:	e7ba      	b.n	80069ce <_reclaim_reent+0x16>
 8006a58:	680e      	ldr	r6, [r1, #0]
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 f814 	bl	8006a88 <_free_r>
 8006a60:	4631      	mov	r1, r6
 8006a62:	e7ef      	b.n	8006a44 <_reclaim_reent+0x8c>
 8006a64:	2500      	movs	r5, #0
 8006a66:	e7ef      	b.n	8006a48 <_reclaim_reent+0x90>
 8006a68:	bd70      	pop	{r4, r5, r6, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000014 	.word	0x20000014

08006a70 <__malloc_lock>:
 8006a70:	4801      	ldr	r0, [pc, #4]	; (8006a78 <__malloc_lock+0x8>)
 8006a72:	f7ff bf89 	b.w	8006988 <__retarget_lock_acquire_recursive>
 8006a76:	bf00      	nop
 8006a78:	20001234 	.word	0x20001234

08006a7c <__malloc_unlock>:
 8006a7c:	4801      	ldr	r0, [pc, #4]	; (8006a84 <__malloc_unlock+0x8>)
 8006a7e:	f7ff bf84 	b.w	800698a <__retarget_lock_release_recursive>
 8006a82:	bf00      	nop
 8006a84:	20001234 	.word	0x20001234

08006a88 <_free_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	d040      	beq.n	8006b12 <_free_r+0x8a>
 8006a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a94:	1f0c      	subs	r4, r1, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bfb8      	it	lt
 8006a9a:	18e4      	addlt	r4, r4, r3
 8006a9c:	f7ff ffe8 	bl	8006a70 <__malloc_lock>
 8006aa0:	4a1c      	ldr	r2, [pc, #112]	; (8006b14 <_free_r+0x8c>)
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	b933      	cbnz	r3, 8006ab4 <_free_r+0x2c>
 8006aa6:	6063      	str	r3, [r4, #4]
 8006aa8:	6014      	str	r4, [r2, #0]
 8006aaa:	4628      	mov	r0, r5
 8006aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ab0:	f7ff bfe4 	b.w	8006a7c <__malloc_unlock>
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	d908      	bls.n	8006aca <_free_r+0x42>
 8006ab8:	6820      	ldr	r0, [r4, #0]
 8006aba:	1821      	adds	r1, r4, r0
 8006abc:	428b      	cmp	r3, r1
 8006abe:	bf01      	itttt	eq
 8006ac0:	6819      	ldreq	r1, [r3, #0]
 8006ac2:	685b      	ldreq	r3, [r3, #4]
 8006ac4:	1809      	addeq	r1, r1, r0
 8006ac6:	6021      	streq	r1, [r4, #0]
 8006ac8:	e7ed      	b.n	8006aa6 <_free_r+0x1e>
 8006aca:	461a      	mov	r2, r3
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	b10b      	cbz	r3, 8006ad4 <_free_r+0x4c>
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	d9fa      	bls.n	8006aca <_free_r+0x42>
 8006ad4:	6811      	ldr	r1, [r2, #0]
 8006ad6:	1850      	adds	r0, r2, r1
 8006ad8:	42a0      	cmp	r0, r4
 8006ada:	d10b      	bne.n	8006af4 <_free_r+0x6c>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	4401      	add	r1, r0
 8006ae0:	1850      	adds	r0, r2, r1
 8006ae2:	4283      	cmp	r3, r0
 8006ae4:	6011      	str	r1, [r2, #0]
 8006ae6:	d1e0      	bne.n	8006aaa <_free_r+0x22>
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	4401      	add	r1, r0
 8006aee:	6011      	str	r1, [r2, #0]
 8006af0:	6053      	str	r3, [r2, #4]
 8006af2:	e7da      	b.n	8006aaa <_free_r+0x22>
 8006af4:	d902      	bls.n	8006afc <_free_r+0x74>
 8006af6:	230c      	movs	r3, #12
 8006af8:	602b      	str	r3, [r5, #0]
 8006afa:	e7d6      	b.n	8006aaa <_free_r+0x22>
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	1821      	adds	r1, r4, r0
 8006b00:	428b      	cmp	r3, r1
 8006b02:	bf01      	itttt	eq
 8006b04:	6819      	ldreq	r1, [r3, #0]
 8006b06:	685b      	ldreq	r3, [r3, #4]
 8006b08:	1809      	addeq	r1, r1, r0
 8006b0a:	6021      	streq	r1, [r4, #0]
 8006b0c:	6063      	str	r3, [r4, #4]
 8006b0e:	6054      	str	r4, [r2, #4]
 8006b10:	e7cb      	b.n	8006aaa <_free_r+0x22>
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	20001238 	.word	0x20001238

08006b18 <_init>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr

08006b24 <_fini>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr
